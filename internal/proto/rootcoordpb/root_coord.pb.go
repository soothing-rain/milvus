// Code generated by protoc-gen-go. DO NOT EDIT.
// source: root_coord.proto

package rootcoordpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commonpb "github.com/milvus-io/milvus/internal/proto/commonpb"
	datapb "github.com/milvus-io/milvus/internal/proto/datapb"
	etcdpb "github.com/milvus-io/milvus/internal/proto/etcdpb"
	indexpb "github.com/milvus-io/milvus/internal/proto/indexpb"
	internalpb "github.com/milvus-io/milvus/internal/proto/internalpb"
	milvuspb "github.com/milvus-io/milvus/internal/proto/milvuspb"
	proxypb "github.com/milvus-io/milvus/internal/proto/proxypb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllocTimestampRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Count                uint32            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AllocTimestampRequest) Reset()         { *m = AllocTimestampRequest{} }
func (m *AllocTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*AllocTimestampRequest) ProtoMessage()    {}
func (*AllocTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{0}
}

func (m *AllocTimestampRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocTimestampRequest.Unmarshal(m, b)
}
func (m *AllocTimestampRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocTimestampRequest.Marshal(b, m, deterministic)
}
func (m *AllocTimestampRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocTimestampRequest.Merge(m, src)
}
func (m *AllocTimestampRequest) XXX_Size() int {
	return xxx_messageInfo_AllocTimestampRequest.Size(m)
}
func (m *AllocTimestampRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocTimestampRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocTimestampRequest proto.InternalMessageInfo

func (m *AllocTimestampRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AllocTimestampRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AllocTimestampResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            uint64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Count                uint32           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllocTimestampResponse) Reset()         { *m = AllocTimestampResponse{} }
func (m *AllocTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*AllocTimestampResponse) ProtoMessage()    {}
func (*AllocTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{1}
}

func (m *AllocTimestampResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocTimestampResponse.Unmarshal(m, b)
}
func (m *AllocTimestampResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocTimestampResponse.Marshal(b, m, deterministic)
}
func (m *AllocTimestampResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocTimestampResponse.Merge(m, src)
}
func (m *AllocTimestampResponse) XXX_Size() int {
	return xxx_messageInfo_AllocTimestampResponse.Size(m)
}
func (m *AllocTimestampResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocTimestampResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocTimestampResponse proto.InternalMessageInfo

func (m *AllocTimestampResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AllocTimestampResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AllocTimestampResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AllocIDRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Count                uint32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AllocIDRequest) Reset()         { *m = AllocIDRequest{} }
func (m *AllocIDRequest) String() string { return proto.CompactTextString(m) }
func (*AllocIDRequest) ProtoMessage()    {}
func (*AllocIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{2}
}

func (m *AllocIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIDRequest.Unmarshal(m, b)
}
func (m *AllocIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIDRequest.Marshal(b, m, deterministic)
}
func (m *AllocIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIDRequest.Merge(m, src)
}
func (m *AllocIDRequest) XXX_Size() int {
	return xxx_messageInfo_AllocIDRequest.Size(m)
}
func (m *AllocIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIDRequest proto.InternalMessageInfo

func (m *AllocIDRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AllocIDRequest) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AllocIDResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ID                   int64            `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Count                uint32           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AllocIDResponse) Reset()         { *m = AllocIDResponse{} }
func (m *AllocIDResponse) String() string { return proto.CompactTextString(m) }
func (*AllocIDResponse) ProtoMessage()    {}
func (*AllocIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{3}
}

func (m *AllocIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocIDResponse.Unmarshal(m, b)
}
func (m *AllocIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocIDResponse.Marshal(b, m, deterministic)
}
func (m *AllocIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocIDResponse.Merge(m, src)
}
func (m *AllocIDResponse) XXX_Size() int {
	return xxx_messageInfo_AllocIDResponse.Size(m)
}
func (m *AllocIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocIDResponse proto.InternalMessageInfo

func (m *AllocIDResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AllocIDResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AllocIDResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ImportResult struct {
	Status               *commonpb.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TaskId               int64                    `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	DatanodeId           int64                    `protobuf:"varint,3,opt,name=datanode_id,json=datanodeId,proto3" json:"datanode_id,omitempty"`
	State                commonpb.ImportState     `protobuf:"varint,4,opt,name=state,proto3,enum=milvus.proto.common.ImportState" json:"state,omitempty"`
	Segments             []int64                  `protobuf:"varint,5,rep,packed,name=segments,proto3" json:"segments,omitempty"`
	AutoIds              []int64                  `protobuf:"varint,6,rep,packed,name=auto_ids,json=autoIds,proto3" json:"auto_ids,omitempty"`
	RowCount             int64                    `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	Infos                []*commonpb.KeyValuePair `protobuf:"bytes,8,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ImportResult) Reset()         { *m = ImportResult{} }
func (m *ImportResult) String() string { return proto.CompactTextString(m) }
func (*ImportResult) ProtoMessage()    {}
func (*ImportResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{4}
}

func (m *ImportResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportResult.Unmarshal(m, b)
}
func (m *ImportResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportResult.Marshal(b, m, deterministic)
}
func (m *ImportResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportResult.Merge(m, src)
}
func (m *ImportResult) XXX_Size() int {
	return xxx_messageInfo_ImportResult.Size(m)
}
func (m *ImportResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportResult.DiscardUnknown(m)
}

var xxx_messageInfo_ImportResult proto.InternalMessageInfo

func (m *ImportResult) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ImportResult) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *ImportResult) GetDatanodeId() int64 {
	if m != nil {
		return m.DatanodeId
	}
	return 0
}

func (m *ImportResult) GetState() commonpb.ImportState {
	if m != nil {
		return m.State
	}
	return commonpb.ImportState_ImportPending
}

func (m *ImportResult) GetSegments() []int64 {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *ImportResult) GetAutoIds() []int64 {
	if m != nil {
		return m.AutoIds
	}
	return nil
}

func (m *ImportResult) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *ImportResult) GetInfos() []*commonpb.KeyValuePair {
	if m != nil {
		return m.Infos
	}
	return nil
}

type DescribeSegmentsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID         int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SegmentIDs           []int64           `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DescribeSegmentsRequest) Reset()         { *m = DescribeSegmentsRequest{} }
func (m *DescribeSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeSegmentsRequest) ProtoMessage()    {}
func (*DescribeSegmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{5}
}

func (m *DescribeSegmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeSegmentsRequest.Unmarshal(m, b)
}
func (m *DescribeSegmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeSegmentsRequest.Marshal(b, m, deterministic)
}
func (m *DescribeSegmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeSegmentsRequest.Merge(m, src)
}
func (m *DescribeSegmentsRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeSegmentsRequest.Size(m)
}
func (m *DescribeSegmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeSegmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeSegmentsRequest proto.InternalMessageInfo

func (m *DescribeSegmentsRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *DescribeSegmentsRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *DescribeSegmentsRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

type SegmentBaseInfo struct {
	CollectionID         int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64    `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	SegmentID            int64    `protobuf:"varint,3,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentBaseInfo) Reset()         { *m = SegmentBaseInfo{} }
func (m *SegmentBaseInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentBaseInfo) ProtoMessage()    {}
func (*SegmentBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{6}
}

func (m *SegmentBaseInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentBaseInfo.Unmarshal(m, b)
}
func (m *SegmentBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentBaseInfo.Marshal(b, m, deterministic)
}
func (m *SegmentBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentBaseInfo.Merge(m, src)
}
func (m *SegmentBaseInfo) XXX_Size() int {
	return xxx_messageInfo_SegmentBaseInfo.Size(m)
}
func (m *SegmentBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentBaseInfo proto.InternalMessageInfo

func (m *SegmentBaseInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *SegmentBaseInfo) GetPartitionID() int64 {
	if m != nil {
		return m.PartitionID
	}
	return 0
}

func (m *SegmentBaseInfo) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

type SegmentInfos struct {
	BaseInfo             *SegmentBaseInfo            `protobuf:"bytes,1,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	IndexInfos           []*etcdpb.SegmentIndexInfo  `protobuf:"bytes,2,rep,name=index_infos,json=indexInfos,proto3" json:"index_infos,omitempty"`
	ExtraIndexInfos      map[int64]*etcdpb.IndexInfo `protobuf:"bytes,3,rep,name=extra_index_infos,json=extraIndexInfos,proto3" json:"extra_index_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SegmentInfos) Reset()         { *m = SegmentInfos{} }
func (m *SegmentInfos) String() string { return proto.CompactTextString(m) }
func (*SegmentInfos) ProtoMessage()    {}
func (*SegmentInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{7}
}

func (m *SegmentInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentInfos.Unmarshal(m, b)
}
func (m *SegmentInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentInfos.Marshal(b, m, deterministic)
}
func (m *SegmentInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfos.Merge(m, src)
}
func (m *SegmentInfos) XXX_Size() int {
	return xxx_messageInfo_SegmentInfos.Size(m)
}
func (m *SegmentInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfos.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfos proto.InternalMessageInfo

func (m *SegmentInfos) GetBaseInfo() *SegmentBaseInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *SegmentInfos) GetIndexInfos() []*etcdpb.SegmentIndexInfo {
	if m != nil {
		return m.IndexInfos
	}
	return nil
}

func (m *SegmentInfos) GetExtraIndexInfos() map[int64]*etcdpb.IndexInfo {
	if m != nil {
		return m.ExtraIndexInfos
	}
	return nil
}

type DescribeSegmentsResponse struct {
	Status               *commonpb.Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionID         int64                   `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SegmentInfos         map[int64]*SegmentInfos `protobuf:"bytes,3,rep,name=segment_infos,json=segmentInfos,proto3" json:"segment_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DescribeSegmentsResponse) Reset()         { *m = DescribeSegmentsResponse{} }
func (m *DescribeSegmentsResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeSegmentsResponse) ProtoMessage()    {}
func (*DescribeSegmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{8}
}

func (m *DescribeSegmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeSegmentsResponse.Unmarshal(m, b)
}
func (m *DescribeSegmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeSegmentsResponse.Marshal(b, m, deterministic)
}
func (m *DescribeSegmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeSegmentsResponse.Merge(m, src)
}
func (m *DescribeSegmentsResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeSegmentsResponse.Size(m)
}
func (m *DescribeSegmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeSegmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeSegmentsResponse proto.InternalMessageInfo

func (m *DescribeSegmentsResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeSegmentsResponse) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *DescribeSegmentsResponse) GetSegmentInfos() map[int64]*SegmentInfos {
	if m != nil {
		return m.SegmentInfos
	}
	return nil
}

type GetCredentialRequest struct {
	// Not useful for now
	Base *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// username
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCredentialRequest) Reset()         { *m = GetCredentialRequest{} }
func (m *GetCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*GetCredentialRequest) ProtoMessage()    {}
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{9}
}

func (m *GetCredentialRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCredentialRequest.Unmarshal(m, b)
}
func (m *GetCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCredentialRequest.Marshal(b, m, deterministic)
}
func (m *GetCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialRequest.Merge(m, src)
}
func (m *GetCredentialRequest) XXX_Size() int {
	return xxx_messageInfo_GetCredentialRequest.Size(m)
}
func (m *GetCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialRequest proto.InternalMessageInfo

func (m *GetCredentialRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetCredentialRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetCredentialResponse struct {
	// Contain error_code and reason
	Status *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// username
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// password stored in etcd/mysql
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCredentialResponse) Reset()         { *m = GetCredentialResponse{} }
func (m *GetCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*GetCredentialResponse) ProtoMessage()    {}
func (*GetCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4513485a144f6b06, []int{10}
}

func (m *GetCredentialResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCredentialResponse.Unmarshal(m, b)
}
func (m *GetCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCredentialResponse.Marshal(b, m, deterministic)
}
func (m *GetCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCredentialResponse.Merge(m, src)
}
func (m *GetCredentialResponse) XXX_Size() int {
	return xxx_messageInfo_GetCredentialResponse.Size(m)
}
func (m *GetCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCredentialResponse proto.InternalMessageInfo

func (m *GetCredentialResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetCredentialResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetCredentialResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*AllocTimestampRequest)(nil), "milvus.proto.rootcoord.AllocTimestampRequest")
	proto.RegisterType((*AllocTimestampResponse)(nil), "milvus.proto.rootcoord.AllocTimestampResponse")
	proto.RegisterType((*AllocIDRequest)(nil), "milvus.proto.rootcoord.AllocIDRequest")
	proto.RegisterType((*AllocIDResponse)(nil), "milvus.proto.rootcoord.AllocIDResponse")
	proto.RegisterType((*ImportResult)(nil), "milvus.proto.rootcoord.ImportResult")
	proto.RegisterType((*DescribeSegmentsRequest)(nil), "milvus.proto.rootcoord.DescribeSegmentsRequest")
	proto.RegisterType((*SegmentBaseInfo)(nil), "milvus.proto.rootcoord.SegmentBaseInfo")
	proto.RegisterType((*SegmentInfos)(nil), "milvus.proto.rootcoord.SegmentInfos")
	proto.RegisterMapType((map[int64]*etcdpb.IndexInfo)(nil), "milvus.proto.rootcoord.SegmentInfos.ExtraIndexInfosEntry")
	proto.RegisterType((*DescribeSegmentsResponse)(nil), "milvus.proto.rootcoord.DescribeSegmentsResponse")
	proto.RegisterMapType((map[int64]*SegmentInfos)(nil), "milvus.proto.rootcoord.DescribeSegmentsResponse.SegmentInfosEntry")
	proto.RegisterType((*GetCredentialRequest)(nil), "milvus.proto.rootcoord.GetCredentialRequest")
	proto.RegisterType((*GetCredentialResponse)(nil), "milvus.proto.rootcoord.GetCredentialResponse")
}

func init() { proto.RegisterFile("root_coord.proto", fileDescriptor_4513485a144f6b06) }

var fileDescriptor_4513485a144f6b06 = []byte{
	// 1667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x6b, 0x73, 0xd3, 0x38,
	0x17, 0x26, 0x09, 0xbd, 0x9d, 0xa4, 0x4d, 0xd1, 0x50, 0x08, 0x81, 0xf7, 0xdd, 0x90, 0xe5, 0x92,
	0x72, 0x49, 0x99, 0x32, 0x03, 0x2c, 0xdf, 0x68, 0x03, 0x25, 0xb3, 0x74, 0x28, 0x0e, 0xec, 0xb0,
	0x17, 0x26, 0xab, 0xda, 0x22, 0xf5, 0xd4, 0xb1, 0x82, 0xa5, 0xf4, 0xf2, 0x71, 0x67, 0xf6, 0xfb,
	0xee, 0x6f, 0xda, 0xfd, 0x29, 0xfb, 0x3b, 0x76, 0x66, 0x47, 0x96, 0xad, 0xd8, 0x8e, 0xe5, 0x3a,
	0xc0, 0x37, 0x4b, 0x7e, 0xf4, 0x3c, 0x47, 0xe7, 0x48, 0x47, 0x47, 0x82, 0x55, 0x8f, 0x52, 0xde,
	0x37, 0x29, 0xf5, 0xac, 0xf6, 0xc8, 0xa3, 0x9c, 0xa2, 0x4b, 0x43, 0xdb, 0x39, 0x1a, 0x33, 0xd9,
	0x6a, 0x8b, 0xdf, 0xfe, 0xdf, 0x7a, 0xc5, 0xa4, 0xc3, 0x21, 0x75, 0x65, 0x7f, 0xbd, 0x12, 0x45,
	0xd5, 0x57, 0x6c, 0x97, 0x13, 0xcf, 0xc5, 0x4e, 0xd0, 0x2e, 0x8f, 0x3c, 0x7a, 0x72, 0x1a, 0x34,
	0x56, 0x2d, 0xcc, 0x71, 0x54, 0xa2, 0x5e, 0x25, 0xdc, 0xb4, 0xfa, 0x43, 0xc2, 0x71, 0xd0, 0x71,
	0xc1, 0x76, 0x2d, 0x72, 0x12, 0xc5, 0x34, 0xfb, 0xb0, 0xf6, 0xcc, 0x71, 0xa8, 0xf9, 0xd6, 0x1e,
	0x12, 0xc6, 0xf1, 0x70, 0x64, 0x90, 0x4f, 0x63, 0xc2, 0x38, 0x7a, 0x00, 0xe7, 0xf7, 0x31, 0x23,
	0xb5, 0x42, 0xa3, 0xd0, 0x2a, 0x6f, 0x5e, 0x6b, 0xc7, 0xcc, 0x0d, 0x6c, 0xdc, 0x65, 0x83, 0x2d,
	0xcc, 0x88, 0xe1, 0x23, 0xd1, 0x45, 0x98, 0x33, 0xe9, 0xd8, 0xe5, 0xb5, 0x52, 0xa3, 0xd0, 0x5a,
	0x36, 0x64, 0xa3, 0xf9, 0x5b, 0x01, 0x2e, 0x25, 0x15, 0xd8, 0x88, 0xba, 0x8c, 0xa0, 0x87, 0x30,
	0xcf, 0x38, 0xe6, 0x63, 0x16, 0x88, 0x5c, 0x4d, 0x15, 0xe9, 0xf9, 0x10, 0x23, 0x80, 0xa2, 0x6b,
	0xb0, 0xc4, 0x43, 0xa6, 0x5a, 0xb1, 0x51, 0x68, 0x9d, 0x37, 0x26, 0x1d, 0x1a, 0x1b, 0xde, 0xc3,
	0x8a, 0x6f, 0x42, 0xb7, 0xf3, 0x15, 0x66, 0x57, 0x8c, 0x32, 0x3b, 0x50, 0x55, 0xcc, 0x5f, 0x32,
	0xab, 0x15, 0x28, 0x76, 0x3b, 0x3e, 0x75, 0xc9, 0x28, 0x76, 0x3b, 0x9a, 0x79, 0xfc, 0x55, 0x84,
	0x4a, 0x77, 0x38, 0xa2, 0x1e, 0x37, 0x08, 0x1b, 0x3b, 0xfc, 0xf3, 0xb4, 0x2e, 0xc3, 0x02, 0xc7,
	0xec, 0xb0, 0x6f, 0x5b, 0x81, 0xe0, 0xbc, 0x68, 0x76, 0x2d, 0xf4, 0x0d, 0x94, 0xc5, 0x1a, 0x72,
	0xa9, 0x45, 0xc4, 0xcf, 0x92, 0xff, 0x13, 0xc2, 0xae, 0xae, 0x85, 0x1e, 0xc1, 0x9c, 0xe0, 0x20,
	0xb5, 0xf3, 0x8d, 0x42, 0x6b, 0x65, 0xb3, 0x91, 0xaa, 0x26, 0x0d, 0x14, 0x9a, 0xc4, 0x90, 0x70,
	0x54, 0x87, 0x45, 0x46, 0x06, 0x43, 0xe2, 0x72, 0x56, 0x9b, 0x6b, 0x94, 0x5a, 0x25, 0x43, 0xb5,
	0xd1, 0x15, 0x58, 0xc4, 0x63, 0x4e, 0xfb, 0xb6, 0xc5, 0x6a, 0xf3, 0xfe, 0xbf, 0x05, 0xd1, 0xee,
	0x5a, 0x0c, 0x5d, 0x85, 0x25, 0x8f, 0x1e, 0xf7, 0xa5, 0x23, 0x16, 0x7c, 0x6b, 0x16, 0x3d, 0x7a,
	0xbc, 0x2d, 0xda, 0xe8, 0x31, 0xcc, 0xd9, 0xee, 0x47, 0xca, 0x6a, 0x8b, 0x8d, 0x52, 0xab, 0xbc,
	0x79, 0x3d, 0xd5, 0x96, 0xef, 0xc9, 0xe9, 0x0f, 0xd8, 0x19, 0x93, 0x3d, 0x6c, 0x7b, 0x86, 0xc4,
	0x37, 0xff, 0x28, 0xc0, 0xe5, 0x0e, 0x61, 0xa6, 0x67, 0xef, 0x93, 0x5e, 0x60, 0xc5, 0xe7, 0x2f,
	0x8b, 0x26, 0x54, 0x4c, 0xea, 0x38, 0xc4, 0xe4, 0x36, 0x75, 0x55, 0x08, 0x63, 0x7d, 0xe8, 0xff,
	0x00, 0xc1, 0x74, 0xbb, 0x1d, 0x56, 0x2b, 0xf9, 0x93, 0x8c, 0xf4, 0x34, 0xc7, 0x50, 0x0d, 0x0c,
	0x11, 0xc4, 0x5d, 0xf7, 0x23, 0x9d, 0xa2, 0x2d, 0xa4, 0xd0, 0x36, 0xa0, 0x3c, 0xc2, 0x1e, 0xb7,
	0x63, 0xca, 0xd1, 0x2e, 0xb1, 0x57, 0x94, 0x4c, 0x10, 0xce, 0x49, 0x47, 0xf3, 0x9f, 0x22, 0x54,
	0x02, 0x5d, 0xa1, 0xc9, 0x50, 0x07, 0x96, 0xc4, 0x9c, 0xfa, 0xc2, 0x4f, 0x81, 0x0b, 0x6e, 0xb7,
	0xd3, 0xd3, 0x54, 0x3b, 0x61, 0xb0, 0xb1, 0xb8, 0x1f, 0x9a, 0xde, 0x81, 0xb2, 0x4c, 0x33, 0x32,
	0x3c, 0x45, 0x3f, 0x3c, 0xdf, 0xc6, 0x79, 0x44, 0x62, 0x6a, 0x2b, 0x6d, 0x8b, 0x9c, 0xf8, 0x1c,
	0x60, 0x87, 0x9f, 0x0c, 0x11, 0xb8, 0x40, 0x4e, 0xb8, 0x87, 0xfb, 0x51, 0xae, 0x92, 0xcf, 0xf5,
	0xdd, 0x19, 0x36, 0xf9, 0x04, 0xed, 0xe7, 0x62, 0xb4, 0xe2, 0x66, 0xcf, 0x5d, 0xee, 0x9d, 0x1a,
	0x55, 0x12, 0xef, 0xad, 0xff, 0x0a, 0x17, 0xd3, 0x80, 0x68, 0x15, 0x4a, 0x87, 0xe4, 0x34, 0x70,
	0xbb, 0xf8, 0x44, 0x9b, 0x30, 0x77, 0x24, 0x96, 0x92, 0xef, 0xe7, 0xa9, 0xb5, 0xe1, 0x4f, 0x68,
	0x32, 0x13, 0x09, 0x7d, 0x5a, 0x7c, 0x52, 0x68, 0xfe, 0x5d, 0x84, 0xda, 0xf4, 0x72, 0xfb, 0x92,
	0x5c, 0x91, 0x67, 0xc9, 0x0d, 0x60, 0x39, 0x08, 0x74, 0xcc, 0x75, 0x5b, 0x3a, 0xd7, 0xe9, 0x2c,
	0x8c, 0xf9, 0x54, 0xfa, 0xb0, 0xc2, 0x22, 0x5d, 0x75, 0x02, 0x17, 0xa6, 0x20, 0x29, 0xde, 0x7b,
	0x1a, 0xf7, 0xde, 0x8d, 0x3c, 0x21, 0x8c, 0x7a, 0xd1, 0x82, 0x8b, 0x3b, 0x84, 0x6f, 0x7b, 0xc4,
	0x22, 0x2e, 0xb7, 0xb1, 0xf3, 0xf9, 0x1b, 0xb6, 0x0e, 0x8b, 0x63, 0x26, 0x0e, 0xd1, 0xa1, 0x34,
	0x66, 0xc9, 0x50, 0xed, 0xe6, 0xef, 0x05, 0x58, 0x4b, 0xc8, 0x7c, 0x49, 0xa0, 0x32, 0xa4, 0xc4,
	0xbf, 0x11, 0x66, 0xec, 0x98, 0x7a, 0x32, 0xd1, 0x2e, 0x19, 0xaa, 0xbd, 0xf9, 0xef, 0x4d, 0x58,
	0x32, 0x28, 0xe5, 0xdb, 0xc2, 0x25, 0x68, 0x04, 0x48, 0xd8, 0x44, 0x87, 0x23, 0xea, 0x12, 0x57,
	0x26, 0x56, 0x86, 0x1e, 0xc4, 0x0d, 0x50, 0x85, 0xc1, 0x34, 0x34, 0x70, 0x55, 0xfd, 0x96, 0x66,
	0x44, 0x02, 0xde, 0x3c, 0x87, 0x86, 0xbe, 0xa2, 0x38, 0xaf, 0xdf, 0xda, 0xe6, 0xe1, 0xf6, 0x01,
	0x76, 0x5d, 0xe2, 0x64, 0x29, 0x26, 0xa0, 0xa1, 0x62, 0x62, 0xd3, 0x07, 0x8d, 0x1e, 0xf7, 0x6c,
	0x77, 0x10, 0x7a, 0xb6, 0x79, 0x0e, 0x7d, 0xf2, 0x63, 0x2b, 0xd4, 0x6d, 0xc6, 0x6d, 0x93, 0x85,
	0x82, 0x9b, 0x7a, 0xc1, 0x29, 0xf0, 0x8c, 0x92, 0x7d, 0x58, 0xdd, 0xf6, 0x08, 0xe6, 0x64, 0x5b,
	0x6d, 0x1a, 0x74, 0x2f, 0x75, 0x68, 0x12, 0x16, 0x0a, 0x65, 0x2d, 0x80, 0xe6, 0x39, 0xf4, 0x33,
	0xac, 0x74, 0x3c, 0x3a, 0x8a, 0xd0, 0xdf, 0x49, 0xa5, 0x8f, 0x83, 0x72, 0x92, 0xf7, 0x61, 0xf9,
	0x25, 0x66, 0x11, 0xee, 0xf5, 0x54, 0xee, 0x18, 0x26, 0xa4, 0xbe, 0x9e, 0x0a, 0xdd, 0xa2, 0xd4,
	0x89, 0xb8, 0xe7, 0x18, 0x50, 0x98, 0x10, 0x22, 0x2a, 0xed, 0xf4, 0x19, 0x4c, 0x01, 0x43, 0xa9,
	0x8d, 0xdc, 0x78, 0x25, 0xfc, 0x0e, 0xca, 0xd2, 0xe1, 0xcf, 0x1c, 0x1b, 0x33, 0x74, 0x3b, 0x23,
	0x24, 0x3e, 0x22, 0xa7, 0xc3, 0xde, 0xc0, 0x92, 0x70, 0xb4, 0x24, 0xbd, 0xa9, 0x0d, 0xc4, 0x2c,
	0x94, 0x3d, 0x80, 0x67, 0x0e, 0x27, 0x9e, 0xe4, 0xbc, 0x95, 0xca, 0x39, 0x01, 0xe4, 0x24, 0x75,
	0xa1, 0xda, 0x3b, 0x10, 0x05, 0x4e, 0xe8, 0x1a, 0x86, 0xee, 0xa6, 0x2f, 0xe8, 0x38, 0x2a, 0xa4,
	0xbf, 0x97, 0x0f, 0xac, 0xdc, 0xfd, 0x01, 0xaa, 0xd2, 0x99, 0x7b, 0x61, 0xd1, 0xa0, 0xd1, 0x4b,
	0xa0, 0x72, 0x4e, 0xe7, 0x47, 0x58, 0x16, 0x6e, 0x9d, 0x90, 0xaf, 0x6b, 0x5d, 0x3f, 0x2b, 0xf5,
	0x07, 0xa8, 0xbc, 0xc4, 0x6c, 0xc2, 0xdc, 0xd2, 0xed, 0x80, 0x29, 0xe2, 0x5c, 0x1b, 0xe0, 0x10,
	0x56, 0x84, 0xd7, 0xd4, 0x60, 0xa6, 0xd9, 0xbe, 0x71, 0x50, 0x28, 0x71, 0x37, 0x17, 0x56, 0x89,
	0xb9, 0x50, 0x4d, 0x1c, 0xbf, 0x9a, 0x28, 0x24, 0x50, 0xd9, 0x51, 0x9f, 0x02, 0x2b, 0x3d, 0x02,
	0x15, 0x61, 0x4b, 0x78, 0xd4, 0x6b, 0x7c, 0x17, 0x85, 0x84, 0x4a, 0xeb, 0x39, 0x90, 0x91, 0x24,
	0xb2, 0x9a, 0xac, 0x2a, 0xd0, 0x46, 0xfe, 0xfa, 0x43, 0x2a, 0x3e, 0x98, 0xb5, 0x60, 0x89, 0x26,
	0x11, 0xbf, 0x1e, 0xcb, 0x4c, 0x22, 0x3e, 0x22, 0xe7, 0x92, 0x3b, 0x80, 0xe5, 0x50, 0x54, 0x12,
	0xaf, 0x67, 0xfa, 0x3d, 0x46, 0x7d, 0x27, 0x0f, 0x54, 0x4d, 0x20, 0x48, 0x57, 0x52, 0x45, 0x9f,
	0xae, 0x66, 0x34, 0x7e, 0x87, 0xc8, 0x52, 0xdb, 0x3f, 0xe6, 0x35, 0xc6, 0xc7, 0x30, 0x1a, 0xe3,
	0xfd, 0x82, 0x3c, 0x8e, 0x64, 0xb1, 0xd3, 0x7c, 0x25, 0x7e, 0xdd, 0x47, 0xf7, 0x75, 0x31, 0x4c,
	0x7d, 0x78, 0xa8, 0xb7, 0xf3, 0xc2, 0x95, 0xe4, 0x2f, 0xb0, 0x10, 0x5c, 0xc2, 0x93, 0x89, 0x38,
	0x31, 0x58, 0xdd, 0xff, 0xeb, 0xb7, 0xcf, 0xc4, 0x29, 0x76, 0x0c, 0x6b, 0xef, 0x46, 0x96, 0x28,
	0x02, 0x64, 0xa9, 0x11, 0x16, 0x3b, 0x49, 0x17, 0x4e, 0x0a, 0xaa, 0x38, 0x6e, 0x97, 0x0d, 0xce,
	0x8a, 0x8e, 0x03, 0x97, 0x0d, 0xe2, 0x10, 0xcc, 0x48, 0xe7, 0xcd, 0xab, 0x5d, 0xc2, 0x18, 0x1e,
	0x90, 0x1e, 0xf7, 0x08, 0x1e, 0x26, 0x8b, 0x20, 0xf9, 0xe0, 0xa3, 0x01, 0xe7, 0x5c, 0x0b, 0x1e,
	0xfc, 0xaf, 0xeb, 0x1e, 0x61, 0xc7, 0xb6, 0x62, 0x95, 0xcd, 0x2e, 0xe1, 0x78, 0x1b, 0x9b, 0x07,
	0x24, 0x5d, 0x33, 0x3e, 0x44, 0x81, 0x73, 0x6a, 0x9a, 0xb0, 0x16, 0xec, 0xd4, 0x17, 0xce, 0x98,
	0x1d, 0x88, 0x9a, 0xd3, 0x21, 0x9c, 0x58, 0xc9, 0x4c, 0x67, 0x61, 0x8e, 0xdb, 0xa9, 0xc8, 0x1c,
	0x6e, 0xec, 0x03, 0xec, 0x10, 0xbe, 0x4b, 0xb8, 0x67, 0x9b, 0xba, 0x33, 0x79, 0x02, 0xd0, 0x2c,
	0x85, 0x14, 0x9c, 0x5a, 0x0a, 0x3d, 0x98, 0x97, 0xaf, 0x1b, 0xa8, 0x99, 0x3a, 0x28, 0x7c, 0x9b,
	0xc9, 0xaa, 0x45, 0xd5, 0xfb, 0x4d, 0xe4, 0xac, 0x11, 0x9b, 0x69, 0xf2, 0x6a, 0xa2, 0x39, 0x6b,
	0xe2, 0xa0, 0xec, 0xb3, 0x26, 0x89, 0x8d, 0x9e, 0x35, 0xaf, 0x6c, 0x16, 0xfc, 0x7c, 0x8b, 0xd9,
	0xa1, 0xae, 0xc2, 0x48, 0xa0, 0xb2, 0xcf, 0x9a, 0x29, 0x70, 0xc4, 0x63, 0x15, 0x83, 0x88, 0x1f,
	0x81, 0xdf, 0xb4, 0x17, 0xbf, 0xe8, 0xb3, 0xd6, 0x59, 0x71, 0x7e, 0xaf, 0xaa, 0x77, 0x75, 0x51,
	0x4b, 0xa6, 0xc9, 0xc9, 0x66, 0x54, 0x10, 0x71, 0xa7, 0xcc, 0xc1, 0x1c, 0xec, 0xf5, 0xaf, 0xcd,
	0xdc, 0x17, 0xa7, 0xa1, 0x58, 0xc8, 0x11, 0x66, 0xdd, 0xc1, 0x1d, 0x87, 0xe5, 0xcf, 0xf0, 0x22,
	0x0c, 0x62, 0xdc, 0x3b, 0x46, 0x3c, 0xa6, 0xc9, 0xf0, 0x31, 0x4c, 0xf6, 0xf1, 0x94, 0x80, 0x46,
	0xd6, 0xd0, 0x72, 0xec, 0x92, 0x9c, 0x9c, 0xc7, 0x24, 0xa8, 0x69, 0x57, 0xf6, 0xfa, 0xfd, 0x9c,
	0xe8, 0xc8, 0x1a, 0x02, 0x19, 0x6e, 0x83, 0x3a, 0x44, 0xb3, 0xad, 0x27, 0x80, 0x9c, 0xee, 0x7a,
	0x0d, 0x8b, 0xe2, 0x0c, 0xf5, 0x29, 0x6f, 0x68, 0x8f, 0xd8, 0x19, 0x08, 0x3f, 0x40, 0xf5, 0xf5,
	0x88, 0x78, 0x98, 0x13, 0xe1, 0x2f, 0x9f, 0x37, 0x7d, 0x67, 0x25, 0x50, 0xb9, 0xef, 0x7c, 0xd0,
	0x23, 0x22, 0x53, 0x67, 0x38, 0x61, 0x02, 0xc8, 0xce, 0x6d, 0x51, 0x5c, 0xe4, 0x4a, 0x1c, 0x08,
	0x08, 0xc3, 0x32, 0x05, 0x7c, 0xcb, 0x73, 0x08, 0x48, 0x5c, 0xac, 0xa6, 0x96, 0xc2, 0x84, 0xd1,
	0xb1, 0x67, 0xea, 0xf2, 0x5c, 0x1c, 0x74, 0x46, 0x4d, 0x9d, 0xc0, 0x46, 0x2f, 0xf8, 0x81, 0x9f,
	0xf7, 0x3c, 0xfb, 0xc8, 0x76, 0xc8, 0x80, 0x68, 0xb6, 0x5b, 0x12, 0x96, 0x33, 0x1e, 0xfb, 0x50,
	0x96, 0xe2, 0x3b, 0x1e, 0x76, 0x39, 0xca, 0xf2, 0x83, 0x8f, 0x08, 0x69, 0x5b, 0x67, 0x03, 0xd5,
	0x24, 0x4c, 0x00, 0xb1, 0x07, 0xf7, 0xa8, 0x63, 0x9b, 0xa7, 0xc9, 0x32, 0x5d, 0xe5, 0xa1, 0x09,
	0x44, 0x53, 0xa6, 0xa7, 0x22, 0x95, 0xc8, 0x9f, 0x05, 0xb8, 0xa2, 0x8e, 0x8b, 0x17, 0xd8, 0x76,
	0x88, 0xd5, 0x53, 0x4f, 0xd3, 0xe8, 0xb1, 0xfe, 0x0d, 0x26, 0x7d, 0x44, 0x68, 0xc3, 0x93, 0xd9,
	0x07, 0x86, 0x26, 0x6d, 0x3d, 0xf9, 0xe9, 0xd1, 0xc0, 0xe6, 0x07, 0xe3, 0x7d, 0xe1, 0xf5, 0x0d,
	0xc9, 0x73, 0xdf, 0xa6, 0xc1, 0xd7, 0x46, 0xc8, 0xb5, 0xe1, 0x53, 0x6f, 0xa8, 0x04, 0x32, 0xda,
	0xdf, 0x9f, 0xf7, 0xbb, 0x1e, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xfe, 0xc5, 0x93, 0x6f,
	0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RootCoordClient is the client API for RootCoord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RootCoordClient interface {
	GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	//*
	// @brief This method is used to create collection
	//
	// @param CreateCollectionRequest, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *milvuspb.CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param DropCollectionRequest, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(ctx context.Context, in *milvuspb.DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param HasCollectionRequest, collection name is going to be tested.
	//
	// @return BoolResponse
	HasCollection(ctx context.Context, in *milvuspb.HasCollectionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param DescribeCollectionRequest, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error)
	CreateAlias(ctx context.Context, in *milvuspb.CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropAlias(ctx context.Context, in *milvuspb.DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterAlias(ctx context.Context, in *milvuspb.AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @return StringListResponse, collection name list
	ShowCollections(ctx context.Context, in *milvuspb.ShowCollectionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowCollectionsResponse, error)
	//*
	// @brief This method is used to create partition
	//
	// @return Status
	CreatePartition(ctx context.Context, in *milvuspb.CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	//*
	// @brief This method is used to drop partition
	//
	// @return Status
	DropPartition(ctx context.Context, in *milvuspb.DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @return BoolResponse
	HasPartition(ctx context.Context, in *milvuspb.HasPartitionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param ShowPartitionRequest, target collection name.
	//
	// @return StringListResponse
	ShowPartitions(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error)
	DescribeSegment(ctx context.Context, in *milvuspb.DescribeSegmentRequest, opts ...grpc.CallOption) (*milvuspb.DescribeSegmentResponse, error)
	ShowSegments(ctx context.Context, in *milvuspb.ShowSegmentsRequest, opts ...grpc.CallOption) (*milvuspb.ShowSegmentsResponse, error)
	DescribeSegments(ctx context.Context, in *DescribeSegmentsRequest, opts ...grpc.CallOption) (*DescribeSegmentsResponse, error)
	CreateIndex(ctx context.Context, in *milvuspb.CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeIndex(ctx context.Context, in *milvuspb.DescribeIndexRequest, opts ...grpc.CallOption) (*milvuspb.DescribeIndexResponse, error)
	DropIndex(ctx context.Context, in *milvuspb.DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetIndexState(ctx context.Context, in *milvuspb.GetIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStatesResponse, error)
	AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error)
	AllocID(ctx context.Context, in *AllocIDRequest, opts ...grpc.CallOption) (*AllocIDResponse, error)
	UpdateChannelTimeTick(ctx context.Context, in *internalpb.ChannelTimeTickMsg, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseDQLMessageStream(ctx context.Context, in *proxypb.ReleaseDQLMessageStreamRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	InvalidateCollectionMetaCache(ctx context.Context, in *proxypb.InvalidateCollMetaCacheRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SegmentFlushCompleted(ctx context.Context, in *datapb.SegmentFlushCompletedMsg, opts ...grpc.CallOption) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(ctx context.Context, in *milvuspb.ImportRequest, opts ...grpc.CallOption) (*milvuspb.ImportResponse, error)
	GetImportState(ctx context.Context, in *milvuspb.GetImportStateRequest, opts ...grpc.CallOption) (*milvuspb.GetImportStateResponse, error)
	ListImportTasks(ctx context.Context, in *milvuspb.ListImportTasksRequest, opts ...grpc.CallOption) (*milvuspb.ListImportTasksResponse, error)
	ReportImport(ctx context.Context, in *ImportResult, opts ...grpc.CallOption) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error)
	DeleteCredential(ctx context.Context, in *milvuspb.DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListCredUsers(ctx context.Context, in *milvuspb.ListCredUsersRequest, opts ...grpc.CallOption) (*milvuspb.ListCredUsersResponse, error)
	// userd by proxy, not exposed to sdk
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(ctx context.Context, in *milvuspb.CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropRole(ctx context.Context, in *milvuspb.DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	OperateUserRole(ctx context.Context, in *milvuspb.OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectRole(ctx context.Context, in *milvuspb.SelectRoleRequest, opts ...grpc.CallOption) (*milvuspb.SelectRoleResponse, error)
	SelectUser(ctx context.Context, in *milvuspb.SelectUserRequest, opts ...grpc.CallOption) (*milvuspb.SelectUserResponse, error)
	SelectResource(ctx context.Context, in *milvuspb.SelectResourceRequest, opts ...grpc.CallOption) (*milvuspb.SelectResourceResponse, error)
	OperatePrivilege(ctx context.Context, in *milvuspb.OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectGrant(ctx context.Context, in *milvuspb.SelectGrantRequest, opts ...grpc.CallOption) (*milvuspb.SelectGrantResponse, error)
	ListPolicy(ctx context.Context, in *internalpb.ListPolicyRequest, opts ...grpc.CallOption) (*internalpb.ListPolicyResponse, error)
	// TODO: move import manager to datacoord to remove this rpc
	GetImportFailedSegmentIDs(ctx context.Context, in *internalpb.GetImportFailedSegmentIDsRequest, opts ...grpc.CallOption) (*internalpb.GetImportFailedSegmentIDsResponse, error)
}

type rootCoordClient struct {
	cc *grpc.ClientConn
}

func NewRootCoordClient(cc *grpc.ClientConn) RootCoordClient {
	return &rootCoordClient{cc}
}

func (c *rootCoordClient) GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error) {
	out := new(internalpb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateCollection(ctx context.Context, in *milvuspb.CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropCollection(ctx context.Context, in *milvuspb.DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) HasCollection(ctx context.Context, in *milvuspb.HasCollectionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error) {
	out := new(milvuspb.BoolResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeCollection(ctx context.Context, in *milvuspb.DescribeCollectionRequest, opts ...grpc.CallOption) (*milvuspb.DescribeCollectionResponse, error) {
	out := new(milvuspb.DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateAlias(ctx context.Context, in *milvuspb.CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropAlias(ctx context.Context, in *milvuspb.DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DropAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AlterAlias(ctx context.Context, in *milvuspb.AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/AlterAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowCollections(ctx context.Context, in *milvuspb.ShowCollectionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowCollectionsResponse, error) {
	out := new(milvuspb.ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreatePartition(ctx context.Context, in *milvuspb.CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropPartition(ctx context.Context, in *milvuspb.DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) HasPartition(ctx context.Context, in *milvuspb.HasPartitionRequest, opts ...grpc.CallOption) (*milvuspb.BoolResponse, error) {
	out := new(milvuspb.BoolResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/HasPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowPartitions(ctx context.Context, in *milvuspb.ShowPartitionsRequest, opts ...grpc.CallOption) (*milvuspb.ShowPartitionsResponse, error) {
	out := new(milvuspb.ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeSegment(ctx context.Context, in *milvuspb.DescribeSegmentRequest, opts ...grpc.CallOption) (*milvuspb.DescribeSegmentResponse, error) {
	out := new(milvuspb.DescribeSegmentResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DescribeSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ShowSegments(ctx context.Context, in *milvuspb.ShowSegmentsRequest, opts ...grpc.CallOption) (*milvuspb.ShowSegmentsResponse, error) {
	out := new(milvuspb.ShowSegmentsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ShowSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeSegments(ctx context.Context, in *DescribeSegmentsRequest, opts ...grpc.CallOption) (*DescribeSegmentsResponse, error) {
	out := new(DescribeSegmentsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DescribeSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateIndex(ctx context.Context, in *milvuspb.CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DescribeIndex(ctx context.Context, in *milvuspb.DescribeIndexRequest, opts ...grpc.CallOption) (*milvuspb.DescribeIndexResponse, error) {
	out := new(milvuspb.DescribeIndexResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropIndex(ctx context.Context, in *milvuspb.DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetIndexState(ctx context.Context, in *milvuspb.GetIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStatesResponse, error) {
	out := new(indexpb.GetIndexStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetIndexState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error) {
	out := new(AllocTimestampResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/AllocTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) AllocID(ctx context.Context, in *AllocIDRequest, opts ...grpc.CallOption) (*AllocIDResponse, error) {
	out := new(AllocIDResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/AllocID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) UpdateChannelTimeTick(ctx context.Context, in *internalpb.ChannelTimeTickMsg, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/UpdateChannelTimeTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ReleaseDQLMessageStream(ctx context.Context, in *proxypb.ReleaseDQLMessageStreamRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ReleaseDQLMessageStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) InvalidateCollectionMetaCache(ctx context.Context, in *proxypb.InvalidateCollMetaCacheRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/InvalidateCollectionMetaCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SegmentFlushCompleted(ctx context.Context, in *datapb.SegmentFlushCompletedMsg, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/SegmentFlushCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) Import(ctx context.Context, in *milvuspb.ImportRequest, opts ...grpc.CallOption) (*milvuspb.ImportResponse, error) {
	out := new(milvuspb.ImportResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetImportState(ctx context.Context, in *milvuspb.GetImportStateRequest, opts ...grpc.CallOption) (*milvuspb.GetImportStateResponse, error) {
	out := new(milvuspb.GetImportStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetImportState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListImportTasks(ctx context.Context, in *milvuspb.ListImportTasksRequest, opts ...grpc.CallOption) (*milvuspb.ListImportTasksResponse, error) {
	out := new(milvuspb.ListImportTasksResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ListImportTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ReportImport(ctx context.Context, in *ImportResult, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ReportImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) UpdateCredential(ctx context.Context, in *internalpb.CredentialInfo, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/UpdateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DeleteCredential(ctx context.Context, in *milvuspb.DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListCredUsers(ctx context.Context, in *milvuspb.ListCredUsersRequest, opts ...grpc.CallOption) (*milvuspb.ListCredUsersResponse, error) {
	out := new(milvuspb.ListCredUsersResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ListCredUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) CreateRole(ctx context.Context, in *milvuspb.CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) DropRole(ctx context.Context, in *milvuspb.DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/DropRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) OperateUserRole(ctx context.Context, in *milvuspb.OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/OperateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectRole(ctx context.Context, in *milvuspb.SelectRoleRequest, opts ...grpc.CallOption) (*milvuspb.SelectRoleResponse, error) {
	out := new(milvuspb.SelectRoleResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/SelectRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectUser(ctx context.Context, in *milvuspb.SelectUserRequest, opts ...grpc.CallOption) (*milvuspb.SelectUserResponse, error) {
	out := new(milvuspb.SelectUserResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/SelectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectResource(ctx context.Context, in *milvuspb.SelectResourceRequest, opts ...grpc.CallOption) (*milvuspb.SelectResourceResponse, error) {
	out := new(milvuspb.SelectResourceResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/SelectResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) OperatePrivilege(ctx context.Context, in *milvuspb.OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/OperatePrivilege", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) SelectGrant(ctx context.Context, in *milvuspb.SelectGrantRequest, opts ...grpc.CallOption) (*milvuspb.SelectGrantResponse, error) {
	out := new(milvuspb.SelectGrantResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/SelectGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) ListPolicy(ctx context.Context, in *internalpb.ListPolicyRequest, opts ...grpc.CallOption) (*internalpb.ListPolicyResponse, error) {
	out := new(internalpb.ListPolicyResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootCoordClient) GetImportFailedSegmentIDs(ctx context.Context, in *internalpb.GetImportFailedSegmentIDsRequest, opts ...grpc.CallOption) (*internalpb.GetImportFailedSegmentIDsResponse, error) {
	out := new(internalpb.GetImportFailedSegmentIDsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.rootcoord.RootCoord/GetImportFailedSegmentIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RootCoordServer is the server API for RootCoord service.
type RootCoordServer interface {
	GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	//*
	// @brief This method is used to create collection
	//
	// @param CreateCollectionRequest, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *milvuspb.CreateCollectionRequest) (*commonpb.Status, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param DropCollectionRequest, collection name is going to be deleted.
	//
	// @return Status
	DropCollection(context.Context, *milvuspb.DropCollectionRequest) (*commonpb.Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param HasCollectionRequest, collection name is going to be tested.
	//
	// @return BoolResponse
	HasCollection(context.Context, *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param DescribeCollectionRequest, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error)
	CreateAlias(context.Context, *milvuspb.CreateAliasRequest) (*commonpb.Status, error)
	DropAlias(context.Context, *milvuspb.DropAliasRequest) (*commonpb.Status, error)
	AlterAlias(context.Context, *milvuspb.AlterAliasRequest) (*commonpb.Status, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @return StringListResponse, collection name list
	ShowCollections(context.Context, *milvuspb.ShowCollectionsRequest) (*milvuspb.ShowCollectionsResponse, error)
	//*
	// @brief This method is used to create partition
	//
	// @return Status
	CreatePartition(context.Context, *milvuspb.CreatePartitionRequest) (*commonpb.Status, error)
	//*
	// @brief This method is used to drop partition
	//
	// @return Status
	DropPartition(context.Context, *milvuspb.DropPartitionRequest) (*commonpb.Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @return BoolResponse
	HasPartition(context.Context, *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param ShowPartitionRequest, target collection name.
	//
	// @return StringListResponse
	ShowPartitions(context.Context, *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error)
	DescribeSegment(context.Context, *milvuspb.DescribeSegmentRequest) (*milvuspb.DescribeSegmentResponse, error)
	ShowSegments(context.Context, *milvuspb.ShowSegmentsRequest) (*milvuspb.ShowSegmentsResponse, error)
	DescribeSegments(context.Context, *DescribeSegmentsRequest) (*DescribeSegmentsResponse, error)
	CreateIndex(context.Context, *milvuspb.CreateIndexRequest) (*commonpb.Status, error)
	DescribeIndex(context.Context, *milvuspb.DescribeIndexRequest) (*milvuspb.DescribeIndexResponse, error)
	DropIndex(context.Context, *milvuspb.DropIndexRequest) (*commonpb.Status, error)
	GetIndexState(context.Context, *milvuspb.GetIndexStateRequest) (*indexpb.GetIndexStatesResponse, error)
	AllocTimestamp(context.Context, *AllocTimestampRequest) (*AllocTimestampResponse, error)
	AllocID(context.Context, *AllocIDRequest) (*AllocIDResponse, error)
	UpdateChannelTimeTick(context.Context, *internalpb.ChannelTimeTickMsg) (*commonpb.Status, error)
	ReleaseDQLMessageStream(context.Context, *proxypb.ReleaseDQLMessageStreamRequest) (*commonpb.Status, error)
	InvalidateCollectionMetaCache(context.Context, *proxypb.InvalidateCollMetaCacheRequest) (*commonpb.Status, error)
	SegmentFlushCompleted(context.Context, *datapb.SegmentFlushCompletedMsg) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(context.Context, *milvuspb.ImportRequest) (*milvuspb.ImportResponse, error)
	GetImportState(context.Context, *milvuspb.GetImportStateRequest) (*milvuspb.GetImportStateResponse, error)
	ListImportTasks(context.Context, *milvuspb.ListImportTasksRequest) (*milvuspb.ListImportTasksResponse, error)
	ReportImport(context.Context, *ImportResult) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error)
	UpdateCredential(context.Context, *internalpb.CredentialInfo) (*commonpb.Status, error)
	DeleteCredential(context.Context, *milvuspb.DeleteCredentialRequest) (*commonpb.Status, error)
	ListCredUsers(context.Context, *milvuspb.ListCredUsersRequest) (*milvuspb.ListCredUsersResponse, error)
	// userd by proxy, not exposed to sdk
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(context.Context, *milvuspb.CreateRoleRequest) (*commonpb.Status, error)
	DropRole(context.Context, *milvuspb.DropRoleRequest) (*commonpb.Status, error)
	OperateUserRole(context.Context, *milvuspb.OperateUserRoleRequest) (*commonpb.Status, error)
	SelectRole(context.Context, *milvuspb.SelectRoleRequest) (*milvuspb.SelectRoleResponse, error)
	SelectUser(context.Context, *milvuspb.SelectUserRequest) (*milvuspb.SelectUserResponse, error)
	SelectResource(context.Context, *milvuspb.SelectResourceRequest) (*milvuspb.SelectResourceResponse, error)
	OperatePrivilege(context.Context, *milvuspb.OperatePrivilegeRequest) (*commonpb.Status, error)
	SelectGrant(context.Context, *milvuspb.SelectGrantRequest) (*milvuspb.SelectGrantResponse, error)
	ListPolicy(context.Context, *internalpb.ListPolicyRequest) (*internalpb.ListPolicyResponse, error)
	// TODO: move import manager to datacoord to remove this rpc
	GetImportFailedSegmentIDs(context.Context, *internalpb.GetImportFailedSegmentIDsRequest) (*internalpb.GetImportFailedSegmentIDsResponse, error)
}

// UnimplementedRootCoordServer can be embedded to have forward compatible implementations.
type UnimplementedRootCoordServer struct {
}

func (*UnimplementedRootCoordServer) GetComponentStates(ctx context.Context, req *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedRootCoordServer) GetTimeTickChannel(ctx context.Context, req *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedRootCoordServer) GetStatisticsChannel(ctx context.Context, req *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedRootCoordServer) CreateCollection(ctx context.Context, req *milvuspb.CreateCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedRootCoordServer) DropCollection(ctx context.Context, req *milvuspb.DropCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (*UnimplementedRootCoordServer) HasCollection(ctx context.Context, req *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (*UnimplementedRootCoordServer) DescribeCollection(ctx context.Context, req *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (*UnimplementedRootCoordServer) CreateAlias(ctx context.Context, req *milvuspb.CreateAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlias not implemented")
}
func (*UnimplementedRootCoordServer) DropAlias(ctx context.Context, req *milvuspb.DropAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAlias not implemented")
}
func (*UnimplementedRootCoordServer) AlterAlias(ctx context.Context, req *milvuspb.AlterAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAlias not implemented")
}
func (*UnimplementedRootCoordServer) ShowCollections(ctx context.Context, req *milvuspb.ShowCollectionsRequest) (*milvuspb.ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedRootCoordServer) CreatePartition(ctx context.Context, req *milvuspb.CreatePartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedRootCoordServer) DropPartition(ctx context.Context, req *milvuspb.DropPartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedRootCoordServer) HasPartition(ctx context.Context, req *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (*UnimplementedRootCoordServer) ShowPartitions(ctx context.Context, req *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedRootCoordServer) DescribeSegment(ctx context.Context, req *milvuspb.DescribeSegmentRequest) (*milvuspb.DescribeSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSegment not implemented")
}
func (*UnimplementedRootCoordServer) ShowSegments(ctx context.Context, req *milvuspb.ShowSegmentsRequest) (*milvuspb.ShowSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSegments not implemented")
}
func (*UnimplementedRootCoordServer) DescribeSegments(ctx context.Context, req *DescribeSegmentsRequest) (*DescribeSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSegments not implemented")
}
func (*UnimplementedRootCoordServer) CreateIndex(ctx context.Context, req *milvuspb.CreateIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedRootCoordServer) DescribeIndex(ctx context.Context, req *milvuspb.DescribeIndexRequest) (*milvuspb.DescribeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedRootCoordServer) DropIndex(ctx context.Context, req *milvuspb.DropIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedRootCoordServer) GetIndexState(ctx context.Context, req *milvuspb.GetIndexStateRequest) (*indexpb.GetIndexStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexState not implemented")
}
func (*UnimplementedRootCoordServer) AllocTimestamp(ctx context.Context, req *AllocTimestampRequest) (*AllocTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocTimestamp not implemented")
}
func (*UnimplementedRootCoordServer) AllocID(ctx context.Context, req *AllocIDRequest) (*AllocIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocID not implemented")
}
func (*UnimplementedRootCoordServer) UpdateChannelTimeTick(ctx context.Context, req *internalpb.ChannelTimeTickMsg) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelTimeTick not implemented")
}
func (*UnimplementedRootCoordServer) ReleaseDQLMessageStream(ctx context.Context, req *proxypb.ReleaseDQLMessageStreamRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDQLMessageStream not implemented")
}
func (*UnimplementedRootCoordServer) InvalidateCollectionMetaCache(ctx context.Context, req *proxypb.InvalidateCollMetaCacheRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCollectionMetaCache not implemented")
}
func (*UnimplementedRootCoordServer) SegmentFlushCompleted(ctx context.Context, req *datapb.SegmentFlushCompletedMsg) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegmentFlushCompleted not implemented")
}
func (*UnimplementedRootCoordServer) GetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedRootCoordServer) Import(ctx context.Context, req *milvuspb.ImportRequest) (*milvuspb.ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedRootCoordServer) GetImportState(ctx context.Context, req *milvuspb.GetImportStateRequest) (*milvuspb.GetImportStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportState not implemented")
}
func (*UnimplementedRootCoordServer) ListImportTasks(ctx context.Context, req *milvuspb.ListImportTasksRequest) (*milvuspb.ListImportTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportTasks not implemented")
}
func (*UnimplementedRootCoordServer) ReportImport(ctx context.Context, req *ImportResult) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportImport not implemented")
}
func (*UnimplementedRootCoordServer) CreateCredential(ctx context.Context, req *internalpb.CredentialInfo) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedRootCoordServer) UpdateCredential(ctx context.Context, req *internalpb.CredentialInfo) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (*UnimplementedRootCoordServer) DeleteCredential(ctx context.Context, req *milvuspb.DeleteCredentialRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (*UnimplementedRootCoordServer) ListCredUsers(ctx context.Context, req *milvuspb.ListCredUsersRequest) (*milvuspb.ListCredUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredUsers not implemented")
}
func (*UnimplementedRootCoordServer) GetCredential(ctx context.Context, req *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedRootCoordServer) CreateRole(ctx context.Context, req *milvuspb.CreateRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedRootCoordServer) DropRole(ctx context.Context, req *milvuspb.DropRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropRole not implemented")
}
func (*UnimplementedRootCoordServer) OperateUserRole(ctx context.Context, req *milvuspb.OperateUserRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateUserRole not implemented")
}
func (*UnimplementedRootCoordServer) SelectRole(ctx context.Context, req *milvuspb.SelectRoleRequest) (*milvuspb.SelectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRole not implemented")
}
func (*UnimplementedRootCoordServer) SelectUser(ctx context.Context, req *milvuspb.SelectUserRequest) (*milvuspb.SelectUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUser not implemented")
}
func (*UnimplementedRootCoordServer) SelectResource(ctx context.Context, req *milvuspb.SelectResourceRequest) (*milvuspb.SelectResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectResource not implemented")
}
func (*UnimplementedRootCoordServer) OperatePrivilege(ctx context.Context, req *milvuspb.OperatePrivilegeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilege not implemented")
}
func (*UnimplementedRootCoordServer) SelectGrant(ctx context.Context, req *milvuspb.SelectGrantRequest) (*milvuspb.SelectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectGrant not implemented")
}
func (*UnimplementedRootCoordServer) ListPolicy(ctx context.Context, req *internalpb.ListPolicyRequest) (*internalpb.ListPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (*UnimplementedRootCoordServer) GetImportFailedSegmentIDs(ctx context.Context, req *internalpb.GetImportFailedSegmentIDsRequest) (*internalpb.GetImportFailedSegmentIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportFailedSegmentIDs not implemented")
}

func RegisterRootCoordServer(s *grpc.Server, srv RootCoordServer) {
	s.RegisterService(&_RootCoord_serviceDesc, srv)
}

func _RootCoord_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetComponentStates(ctx, req.(*internalpb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateCollection(ctx, req.(*milvuspb.CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropCollection(ctx, req.(*milvuspb.DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.HasCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).HasCollection(ctx, req.(*milvuspb.HasCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeCollection(ctx, req.(*milvuspb.DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateAlias(ctx, req.(*milvuspb.CreateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DropAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropAlias(ctx, req.(*milvuspb.DropAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AlterAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.AlterAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AlterAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/AlterAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AlterAlias(ctx, req.(*milvuspb.AlterAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowCollections(ctx, req.(*milvuspb.ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreatePartition(ctx, req.(*milvuspb.CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropPartition(ctx, req.(*milvuspb.DropPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.HasPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/HasPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).HasPartition(ctx, req.(*milvuspb.HasPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowPartitions(ctx, req.(*milvuspb.ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DescribeSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeSegment(ctx, req.(*milvuspb.DescribeSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ShowSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ShowSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ShowSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ShowSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ShowSegments(ctx, req.(*milvuspb.ShowSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DescribeSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeSegments(ctx, req.(*DescribeSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateIndex(ctx, req.(*milvuspb.CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DescribeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DescribeIndex(ctx, req.(*milvuspb.DescribeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropIndex(ctx, req.(*milvuspb.DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetIndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetIndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetIndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetIndexState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetIndexState(ctx, req.(*milvuspb.GetIndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AllocTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AllocTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/AllocTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AllocTimestamp(ctx, req.(*AllocTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_AllocID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).AllocID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/AllocID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).AllocID(ctx, req.(*AllocIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_UpdateChannelTimeTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ChannelTimeTickMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).UpdateChannelTimeTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/UpdateChannelTimeTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).UpdateChannelTimeTick(ctx, req.(*internalpb.ChannelTimeTickMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ReleaseDQLMessageStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proxypb.ReleaseDQLMessageStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ReleaseDQLMessageStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ReleaseDQLMessageStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ReleaseDQLMessageStream(ctx, req.(*proxypb.ReleaseDQLMessageStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_InvalidateCollectionMetaCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proxypb.InvalidateCollMetaCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).InvalidateCollectionMetaCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/InvalidateCollectionMetaCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).InvalidateCollectionMetaCache(ctx, req.(*proxypb.InvalidateCollMetaCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SegmentFlushCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datapb.SegmentFlushCompletedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SegmentFlushCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/SegmentFlushCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SegmentFlushCompleted(ctx, req.(*datapb.SegmentFlushCompletedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).Import(ctx, req.(*milvuspb.ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetImportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetImportStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetImportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetImportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetImportState(ctx, req.(*milvuspb.GetImportStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListImportTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListImportTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListImportTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ListImportTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListImportTasks(ctx, req.(*milvuspb.ListImportTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ReportImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ReportImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ReportImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ReportImport(ctx, req.(*ImportResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.CredentialInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateCredential(ctx, req.(*internalpb.CredentialInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.CredentialInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/UpdateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).UpdateCredential(ctx, req.(*internalpb.CredentialInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DeleteCredential(ctx, req.(*milvuspb.DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListCredUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ListCredUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListCredUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ListCredUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListCredUsers(ctx, req.(*milvuspb.ListCredUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).CreateRole(ctx, req.(*milvuspb.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_DropRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.DropRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).DropRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/DropRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).DropRole(ctx, req.(*milvuspb.DropRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_OperateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.OperateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).OperateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/OperateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).OperateUserRole(ctx, req.(*milvuspb.OperateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/SelectRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectRole(ctx, req.(*milvuspb.SelectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/SelectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectUser(ctx, req.(*milvuspb.SelectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/SelectResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectResource(ctx, req.(*milvuspb.SelectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_OperatePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.OperatePrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).OperatePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/OperatePrivilege",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).OperatePrivilege(ctx, req.(*milvuspb.OperatePrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_SelectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.SelectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).SelectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/SelectGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).SelectGrant(ctx, req.(*milvuspb.SelectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).ListPolicy(ctx, req.(*internalpb.ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootCoord_GetImportFailedSegmentIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetImportFailedSegmentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootCoordServer).GetImportFailedSegmentIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.rootcoord.RootCoord/GetImportFailedSegmentIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootCoordServer).GetImportFailedSegmentIDs(ctx, req.(*internalpb.GetImportFailedSegmentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RootCoord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.rootcoord.RootCoord",
	HandlerType: (*RootCoordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _RootCoord_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _RootCoord_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _RootCoord_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _RootCoord_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _RootCoord_DropCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _RootCoord_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _RootCoord_DescribeCollection_Handler,
		},
		{
			MethodName: "CreateAlias",
			Handler:    _RootCoord_CreateAlias_Handler,
		},
		{
			MethodName: "DropAlias",
			Handler:    _RootCoord_DropAlias_Handler,
		},
		{
			MethodName: "AlterAlias",
			Handler:    _RootCoord_AlterAlias_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _RootCoord_ShowCollections_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _RootCoord_CreatePartition_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _RootCoord_DropPartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _RootCoord_HasPartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _RootCoord_ShowPartitions_Handler,
		},
		{
			MethodName: "DescribeSegment",
			Handler:    _RootCoord_DescribeSegment_Handler,
		},
		{
			MethodName: "ShowSegments",
			Handler:    _RootCoord_ShowSegments_Handler,
		},
		{
			MethodName: "DescribeSegments",
			Handler:    _RootCoord_DescribeSegments_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _RootCoord_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _RootCoord_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _RootCoord_DropIndex_Handler,
		},
		{
			MethodName: "GetIndexState",
			Handler:    _RootCoord_GetIndexState_Handler,
		},
		{
			MethodName: "AllocTimestamp",
			Handler:    _RootCoord_AllocTimestamp_Handler,
		},
		{
			MethodName: "AllocID",
			Handler:    _RootCoord_AllocID_Handler,
		},
		{
			MethodName: "UpdateChannelTimeTick",
			Handler:    _RootCoord_UpdateChannelTimeTick_Handler,
		},
		{
			MethodName: "ReleaseDQLMessageStream",
			Handler:    _RootCoord_ReleaseDQLMessageStream_Handler,
		},
		{
			MethodName: "InvalidateCollectionMetaCache",
			Handler:    _RootCoord_InvalidateCollectionMetaCache_Handler,
		},
		{
			MethodName: "SegmentFlushCompleted",
			Handler:    _RootCoord_SegmentFlushCompleted_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _RootCoord_GetMetrics_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _RootCoord_Import_Handler,
		},
		{
			MethodName: "GetImportState",
			Handler:    _RootCoord_GetImportState_Handler,
		},
		{
			MethodName: "ListImportTasks",
			Handler:    _RootCoord_ListImportTasks_Handler,
		},
		{
			MethodName: "ReportImport",
			Handler:    _RootCoord_ReportImport_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _RootCoord_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _RootCoord_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _RootCoord_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredUsers",
			Handler:    _RootCoord_ListCredUsers_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _RootCoord_GetCredential_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RootCoord_CreateRole_Handler,
		},
		{
			MethodName: "DropRole",
			Handler:    _RootCoord_DropRole_Handler,
		},
		{
			MethodName: "OperateUserRole",
			Handler:    _RootCoord_OperateUserRole_Handler,
		},
		{
			MethodName: "SelectRole",
			Handler:    _RootCoord_SelectRole_Handler,
		},
		{
			MethodName: "SelectUser",
			Handler:    _RootCoord_SelectUser_Handler,
		},
		{
			MethodName: "SelectResource",
			Handler:    _RootCoord_SelectResource_Handler,
		},
		{
			MethodName: "OperatePrivilege",
			Handler:    _RootCoord_OperatePrivilege_Handler,
		},
		{
			MethodName: "SelectGrant",
			Handler:    _RootCoord_SelectGrant_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _RootCoord_ListPolicy_Handler,
		},
		{
			MethodName: "GetImportFailedSegmentIDs",
			Handler:    _RootCoord_GetImportFailedSegmentIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root_coord.proto",
}
