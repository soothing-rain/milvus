// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan.proto

#include "plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace milvus {
namespace proto {
namespace plan {
constexpr GenericValue::GenericValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct GenericValueDefaultTypeInternal {
  constexpr GenericValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericValueDefaultTypeInternal() {}
  union {
    GenericValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericValueDefaultTypeInternal _GenericValue_default_instance_;
constexpr QueryInfo::QueryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metric_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , search_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , topk_(int64_t{0})
  , round_decimal_(int64_t{0}){}
struct QueryInfoDefaultTypeInternal {
  constexpr QueryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryInfoDefaultTypeInternal() {}
  union {
    QueryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
constexpr ColumnInfo::ColumnInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_id_(int64_t{0})
  , data_type_(0)

  , is_primary_key_(false)
  , is_autoid_(false){}
struct ColumnInfoDefaultTypeInternal {
  constexpr ColumnInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnInfoDefaultTypeInternal() {}
  union {
    ColumnInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnInfoDefaultTypeInternal _ColumnInfo_default_instance_;
constexpr ColumnExpr::ColumnExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct ColumnExprDefaultTypeInternal {
  constexpr ColumnExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnExprDefaultTypeInternal() {}
  union {
    ColumnExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnExprDefaultTypeInternal _ColumnExpr_default_instance_;
constexpr ValueExpr::ValueExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct ValueExprDefaultTypeInternal {
  constexpr ValueExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueExprDefaultTypeInternal() {}
  union {
    ValueExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueExprDefaultTypeInternal _ValueExpr_default_instance_;
constexpr UnaryRangeExpr::UnaryRangeExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_info_(nullptr)
  , value_(nullptr)
  , op_(0)
{}
struct UnaryRangeExprDefaultTypeInternal {
  constexpr UnaryRangeExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnaryRangeExprDefaultTypeInternal() {}
  union {
    UnaryRangeExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnaryRangeExprDefaultTypeInternal _UnaryRangeExpr_default_instance_;
constexpr BinaryRangeExpr::BinaryRangeExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_info_(nullptr)
  , lower_value_(nullptr)
  , upper_value_(nullptr)
  , lower_inclusive_(false)
  , upper_inclusive_(false){}
struct BinaryRangeExprDefaultTypeInternal {
  constexpr BinaryRangeExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryRangeExprDefaultTypeInternal() {}
  union {
    BinaryRangeExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryRangeExprDefaultTypeInternal _BinaryRangeExpr_default_instance_;
constexpr CompareExpr::CompareExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_column_info_(nullptr)
  , right_column_info_(nullptr)
  , op_(0)
{}
struct CompareExprDefaultTypeInternal {
  constexpr CompareExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompareExprDefaultTypeInternal() {}
  union {
    CompareExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompareExprDefaultTypeInternal _CompareExpr_default_instance_;
constexpr TermExpr::TermExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , column_info_(nullptr){}
struct TermExprDefaultTypeInternal {
  constexpr TermExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TermExprDefaultTypeInternal() {}
  union {
    TermExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TermExprDefaultTypeInternal _TermExpr_default_instance_;
constexpr UnaryExpr::UnaryExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_(nullptr)
  , op_(0)
{}
struct UnaryExprDefaultTypeInternal {
  constexpr UnaryExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnaryExprDefaultTypeInternal() {}
  union {
    UnaryExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnaryExprDefaultTypeInternal _UnaryExpr_default_instance_;
constexpr BinaryExpr::BinaryExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(nullptr)
  , right_(nullptr)
  , op_(0)
{}
struct BinaryExprDefaultTypeInternal {
  constexpr BinaryExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryExprDefaultTypeInternal() {}
  union {
    BinaryExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryExprDefaultTypeInternal _BinaryExpr_default_instance_;
constexpr BinaryArithOp::BinaryArithOp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_info_(nullptr)
  , right_operand_(nullptr)
  , arith_op_(0)
{}
struct BinaryArithOpDefaultTypeInternal {
  constexpr BinaryArithOpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryArithOpDefaultTypeInternal() {}
  union {
    BinaryArithOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryArithOpDefaultTypeInternal _BinaryArithOp_default_instance_;
constexpr BinaryArithExpr::BinaryArithExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(nullptr)
  , right_(nullptr)
  , op_(0)
{}
struct BinaryArithExprDefaultTypeInternal {
  constexpr BinaryArithExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryArithExprDefaultTypeInternal() {}
  union {
    BinaryArithExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryArithExprDefaultTypeInternal _BinaryArithExpr_default_instance_;
constexpr BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_info_(nullptr)
  , right_operand_(nullptr)
  , value_(nullptr)
  , arith_op_(0)

  , op_(0)
{}
struct BinaryArithOpEvalRangeExprDefaultTypeInternal {
  constexpr BinaryArithOpEvalRangeExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryArithOpEvalRangeExprDefaultTypeInternal() {}
  union {
    BinaryArithOpEvalRangeExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryArithOpEvalRangeExprDefaultTypeInternal _BinaryArithOpEvalRangeExpr_default_instance_;
constexpr Expr::Expr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExprDefaultTypeInternal {
  constexpr ExprDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExprDefaultTypeInternal() {}
  union {
    Expr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExprDefaultTypeInternal _Expr_default_instance_;
constexpr VectorANNS::VectorANNS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : placeholder_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predicates_(nullptr)
  , query_info_(nullptr)
  , field_id_(int64_t{0})
  , is_binary_(false){}
struct VectorANNSDefaultTypeInternal {
  constexpr VectorANNSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorANNSDefaultTypeInternal() {}
  union {
    VectorANNS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorANNSDefaultTypeInternal _VectorANNS_default_instance_;
constexpr PlanNode::PlanNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_field_ids_()
  , _output_field_ids_cached_byte_size_()
  , _oneof_case_{}{}
struct PlanNodeDefaultTypeInternal {
  constexpr PlanNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlanNodeDefaultTypeInternal() {}
  union {
    PlanNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlanNodeDefaultTypeInternal _PlanNode_default_instance_;
}  // namespace plan
}  // namespace proto
}  // namespace milvus
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_plan_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_plan_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_plan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_plan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::GenericValue, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, topk_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, metric_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, search_params_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::QueryInfo, round_decimal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, field_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, data_type_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, is_primary_key_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnInfo, is_autoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ColumnExpr, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ValueExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::ValueExpr, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryRangeExpr, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, lower_inclusive_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, upper_inclusive_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, lower_value_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryRangeExpr, upper_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, left_column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, right_column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::CompareExpr, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::TermExpr, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::UnaryExpr, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, left_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryExpr, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, arith_op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOp, right_operand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, left_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, right_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithExpr, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, column_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, arith_op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, right_operand_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, op_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::BinaryArithOpEvalRangeExpr, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::Expr, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, is_binary_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, field_id_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, predicates_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, query_info_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::VectorANNS, placeholder_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, output_field_ids_),
  PROTOBUF_FIELD_OFFSET(::milvus::proto::plan::PlanNode, node_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::milvus::proto::plan::GenericValue)},
  { 10, -1, sizeof(::milvus::proto::plan::QueryInfo)},
  { 19, -1, sizeof(::milvus::proto::plan::ColumnInfo)},
  { 28, -1, sizeof(::milvus::proto::plan::ColumnExpr)},
  { 34, -1, sizeof(::milvus::proto::plan::ValueExpr)},
  { 40, -1, sizeof(::milvus::proto::plan::UnaryRangeExpr)},
  { 48, -1, sizeof(::milvus::proto::plan::BinaryRangeExpr)},
  { 58, -1, sizeof(::milvus::proto::plan::CompareExpr)},
  { 66, -1, sizeof(::milvus::proto::plan::TermExpr)},
  { 73, -1, sizeof(::milvus::proto::plan::UnaryExpr)},
  { 80, -1, sizeof(::milvus::proto::plan::BinaryExpr)},
  { 88, -1, sizeof(::milvus::proto::plan::BinaryArithOp)},
  { 96, -1, sizeof(::milvus::proto::plan::BinaryArithExpr)},
  { 104, -1, sizeof(::milvus::proto::plan::BinaryArithOpEvalRangeExpr)},
  { 114, -1, sizeof(::milvus::proto::plan::Expr)},
  { 130, -1, sizeof(::milvus::proto::plan::VectorANNS)},
  { 140, -1, sizeof(::milvus::proto::plan::PlanNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_GenericValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_QueryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_ColumnInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_ColumnExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_ValueExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_UnaryRangeExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_BinaryRangeExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_CompareExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_TermExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_UnaryExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_BinaryExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_BinaryArithOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_BinaryArithExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_BinaryArithOpEvalRangeExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_Expr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_VectorANNS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::milvus::proto::plan::_PlanNode_default_instance_),
};

const char descriptor_table_protodef_plan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nplan.proto\022\021milvus.proto.plan\032\014schema."
  "proto\"i\n\014GenericValue\022\022\n\010bool_val\030\001 \001(\010H"
  "\000\022\023\n\tint64_val\030\002 \001(\003H\000\022\023\n\tfloat_val\030\003 \001("
  "\001H\000\022\024\n\nstring_val\030\004 \001(\tH\000B\005\n\003val\"\\\n\tQuer"
  "yInfo\022\014\n\004topk\030\001 \001(\003\022\023\n\013metric_type\030\003 \001(\t"
  "\022\025\n\rsearch_params\030\004 \001(\t\022\025\n\rround_decimal"
  "\030\005 \001(\003\"{\n\nColumnInfo\022\020\n\010field_id\030\001 \001(\003\0220"
  "\n\tdata_type\030\002 \001(\0162\035.milvus.proto.schema."
  "DataType\022\026\n\016is_primary_key\030\003 \001(\010\022\021\n\tis_a"
  "utoID\030\004 \001(\010\"9\n\nColumnExpr\022+\n\004info\030\001 \001(\0132"
  "\035.milvus.proto.plan.ColumnInfo\";\n\tValueE"
  "xpr\022.\n\005value\030\001 \001(\0132\037.milvus.proto.plan.G"
  "enericValue\"\233\001\n\016UnaryRangeExpr\0222\n\013column"
  "_info\030\001 \001(\0132\035.milvus.proto.plan.ColumnIn"
  "fo\022%\n\002op\030\002 \001(\0162\031.milvus.proto.plan.OpTyp"
  "e\022.\n\005value\030\003 \001(\0132\037.milvus.proto.plan.Gen"
  "ericValue\"\343\001\n\017BinaryRangeExpr\0222\n\013column_"
  "info\030\001 \001(\0132\035.milvus.proto.plan.ColumnInf"
  "o\022\027\n\017lower_inclusive\030\002 \001(\010\022\027\n\017upper_incl"
  "usive\030\003 \001(\010\0224\n\013lower_value\030\004 \001(\0132\037.milvu"
  "s.proto.plan.GenericValue\0224\n\013upper_value"
  "\030\005 \001(\0132\037.milvus.proto.plan.GenericValue\""
  "\247\001\n\013CompareExpr\0227\n\020left_column_info\030\001 \001("
  "\0132\035.milvus.proto.plan.ColumnInfo\0228\n\021righ"
  "t_column_info\030\002 \001(\0132\035.milvus.proto.plan."
  "ColumnInfo\022%\n\002op\030\003 \001(\0162\031.milvus.proto.pl"
  "an.OpType\"o\n\010TermExpr\0222\n\013column_info\030\001 \001"
  "(\0132\035.milvus.proto.plan.ColumnInfo\022/\n\006val"
  "ues\030\002 \003(\0132\037.milvus.proto.plan.GenericVal"
  "ue\"\206\001\n\tUnaryExpr\0220\n\002op\030\001 \001(\0162$.milvus.pr"
  "oto.plan.UnaryExpr.UnaryOp\022&\n\005child\030\002 \001("
  "\0132\027.milvus.proto.plan.Expr\"\037\n\007UnaryOp\022\013\n"
  "\007Invalid\020\000\022\007\n\003Not\020\001\"\307\001\n\nBinaryExpr\0222\n\002op"
  "\030\001 \001(\0162&.milvus.proto.plan.BinaryExpr.Bi"
  "naryOp\022%\n\004left\030\002 \001(\0132\027.milvus.proto.plan"
  ".Expr\022&\n\005right\030\003 \001(\0132\027.milvus.proto.plan"
  ".Expr\"6\n\010BinaryOp\022\013\n\007Invalid\020\000\022\016\n\nLogica"
  "lAnd\020\001\022\r\n\tLogicalOr\020\002\"\255\001\n\rBinaryArithOp\022"
  "2\n\013column_info\030\001 \001(\0132\035.milvus.proto.plan"
  ".ColumnInfo\0220\n\010arith_op\030\002 \001(\0162\036.milvus.p"
  "roto.plan.ArithOpType\0226\n\rright_operand\030\003"
  " \001(\0132\037.milvus.proto.plan.GenericValue\"\214\001"
  "\n\017BinaryArithExpr\022%\n\004left\030\001 \001(\0132\027.milvus"
  ".proto.plan.Expr\022&\n\005right\030\002 \001(\0132\027.milvus"
  ".proto.plan.Expr\022*\n\002op\030\003 \001(\0162\036.milvus.pr"
  "oto.plan.ArithOpType\"\221\002\n\032BinaryArithOpEv"
  "alRangeExpr\0222\n\013column_info\030\001 \001(\0132\035.milvu"
  "s.proto.plan.ColumnInfo\0220\n\010arith_op\030\002 \001("
  "\0162\036.milvus.proto.plan.ArithOpType\0226\n\rrig"
  "ht_operand\030\003 \001(\0132\037.milvus.proto.plan.Gen"
  "ericValue\022%\n\002op\030\004 \001(\0162\031.milvus.proto.pla"
  "n.OpType\022.\n\005value\030\005 \001(\0132\037.milvus.proto.p"
  "lan.GenericValue\"\347\004\n\004Expr\0220\n\tterm_expr\030\001"
  " \001(\0132\033.milvus.proto.plan.TermExprH\000\0222\n\nu"
  "nary_expr\030\002 \001(\0132\034.milvus.proto.plan.Unar"
  "yExprH\000\0224\n\013binary_expr\030\003 \001(\0132\035.milvus.pr"
  "oto.plan.BinaryExprH\000\0226\n\014compare_expr\030\004 "
  "\001(\0132\036.milvus.proto.plan.CompareExprH\000\022=\n"
  "\020unary_range_expr\030\005 \001(\0132!.milvus.proto.p"
  "lan.UnaryRangeExprH\000\022\?\n\021binary_range_exp"
  "r\030\006 \001(\0132\".milvus.proto.plan.BinaryRangeE"
  "xprH\000\022X\n\037binary_arith_op_eval_range_expr"
  "\030\007 \001(\0132-.milvus.proto.plan.BinaryArithOp"
  "EvalRangeExprH\000\022\?\n\021binary_arith_expr\030\010 \001"
  "(\0132\".milvus.proto.plan.BinaryArithExprH\000"
  "\0222\n\nvalue_expr\030\t \001(\0132\034.milvus.proto.plan"
  ".ValueExprH\000\0224\n\013column_expr\030\n \001(\0132\035.milv"
  "us.proto.plan.ColumnExprH\000B\006\n\004expr\"\251\001\n\nV"
  "ectorANNS\022\021\n\tis_binary\030\001 \001(\010\022\020\n\010field_id"
  "\030\002 \001(\003\022+\n\npredicates\030\003 \001(\0132\027.milvus.prot"
  "o.plan.Expr\0220\n\nquery_info\030\004 \001(\0132\034.milvus"
  ".proto.plan.QueryInfo\022\027\n\017placeholder_tag"
  "\030\005 \001(\t\"\221\001\n\010PlanNode\0224\n\013vector_anns\030\001 \001(\013"
  "2\035.milvus.proto.plan.VectorANNSH\000\022-\n\npre"
  "dicates\030\002 \001(\0132\027.milvus.proto.plan.ExprH\000"
  "\022\030\n\020output_field_ids\030\003 \003(\003B\006\n\004node*\272\001\n\006O"
  "pType\022\013\n\007Invalid\020\000\022\017\n\013GreaterThan\020\001\022\020\n\014G"
  "reaterEqual\020\002\022\014\n\010LessThan\020\003\022\r\n\tLessEqual"
  "\020\004\022\t\n\005Equal\020\005\022\014\n\010NotEqual\020\006\022\017\n\013PrefixMat"
  "ch\020\007\022\020\n\014PostfixMatch\020\010\022\t\n\005Match\020\t\022\t\n\005Ran"
  "ge\020\n\022\006\n\002In\020\013\022\t\n\005NotIn\020\014*G\n\013ArithOpType\022\013"
  "\n\007Unknown\020\000\022\007\n\003Add\020\001\022\007\n\003Sub\020\002\022\007\n\003Mul\020\003\022\007"
  "\n\003Div\020\004\022\007\n\003Mod\020\005B3Z1github.com/milvus-io"
  "/milvus/internal/proto/planpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_plan_2eproto_deps[1] = {
  &::descriptor_table_schema_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_plan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plan_2eproto = {
  false, false, 3357, descriptor_table_protodef_plan_2eproto, "plan.proto", 
  &descriptor_table_plan_2eproto_once, descriptor_table_plan_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_plan_2eproto::offsets,
  file_level_metadata_plan_2eproto, file_level_enum_descriptors_plan_2eproto, file_level_service_descriptors_plan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_plan_2eproto_getter() {
  return &descriptor_table_plan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_plan_2eproto(&descriptor_table_plan_2eproto);
namespace milvus {
namespace proto {
namespace plan {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnaryExpr_UnaryOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plan_2eproto);
  return file_level_enum_descriptors_plan_2eproto[0];
}
bool UnaryExpr_UnaryOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UnaryExpr_UnaryOp UnaryExpr::Invalid;
constexpr UnaryExpr_UnaryOp UnaryExpr::Not;
constexpr UnaryExpr_UnaryOp UnaryExpr::UnaryOp_MIN;
constexpr UnaryExpr_UnaryOp UnaryExpr::UnaryOp_MAX;
constexpr int UnaryExpr::UnaryOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BinaryExpr_BinaryOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plan_2eproto);
  return file_level_enum_descriptors_plan_2eproto[1];
}
bool BinaryExpr_BinaryOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BinaryExpr_BinaryOp BinaryExpr::Invalid;
constexpr BinaryExpr_BinaryOp BinaryExpr::LogicalAnd;
constexpr BinaryExpr_BinaryOp BinaryExpr::LogicalOr;
constexpr BinaryExpr_BinaryOp BinaryExpr::BinaryOp_MIN;
constexpr BinaryExpr_BinaryOp BinaryExpr::BinaryOp_MAX;
constexpr int BinaryExpr::BinaryOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plan_2eproto);
  return file_level_enum_descriptors_plan_2eproto[2];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArithOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plan_2eproto);
  return file_level_enum_descriptors_plan_2eproto[3];
}
bool ArithOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GenericValue::_Internal {
 public:
};

GenericValue::GenericValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.GenericValue)
}
GenericValue::GenericValue(const GenericValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kInt64Val: {
      _internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.GenericValue)
}

void GenericValue::SharedCtor() {
clear_has_val();
}

GenericValue::~GenericValue() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.GenericValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_val()) {
    clear_val();
  }
}

void GenericValue::ArenaDtor(void* object) {
  GenericValue* _this = reinterpret_cast< GenericValue* >(object);
  (void)_this;
}
void GenericValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericValue::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.GenericValue)
  switch (val_case()) {
    case kBoolVal: {
      // No need to clear
      break;
    }
    case kInt64Val: {
      // No need to clear
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kStringVal: {
      val_.string_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void GenericValue::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.GenericValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bool_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_int64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double float_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.plan.GenericValue.string_val"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.GenericValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bool_val = 1;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_val(), target);
  }

  // int64 int64_val = 2;
  if (_internal_has_int64_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_val(), target);
  }

  // double float_val = 3;
  if (_internal_has_float_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_float_val(), target);
  }

  // string string_val = 4;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.plan.GenericValue.string_val");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.GenericValue)
  return target;
}

size_t GenericValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.GenericValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (val_case()) {
    // bool bool_val = 1;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    // int64 int64_val = 2;
    case kInt64Val: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_val());
      break;
    }
    // double float_val = 3;
    case kFloatVal: {
      total_size += 1 + 8;
      break;
    }
    // string string_val = 4;
    case kStringVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.GenericValue)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.GenericValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.GenericValue)
    MergeFrom(*source);
  }
}

void GenericValue::MergeFrom(const GenericValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.GenericValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kInt64Val: {
      _internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
}

void GenericValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.GenericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericValue::CopyFrom(const GenericValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.GenericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericValue::IsInitialized() const {
  return true;
}

void GenericValue::InternalSwap(GenericValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[0]);
}

// ===================================================================

class QueryInfo::_Internal {
 public:
};

QueryInfo::QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metric_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric_type().empty()) {
    metric_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric_type(), 
      GetArenaForAllocation());
  }
  search_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_params().empty()) {
    search_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&topk_, &from.topk_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_decimal_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(round_decimal_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.QueryInfo)
}

void QueryInfo::SharedCtor() {
metric_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
search_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_decimal_) -
    reinterpret_cast<char*>(&topk_)) + sizeof(round_decimal_));
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.QueryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metric_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  search_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryInfo::ArenaDtor(void* object) {
  QueryInfo* _this = reinterpret_cast< QueryInfo* >(object);
  (void)_this;
}
void QueryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.QueryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_type_.ClearToEmpty();
  search_params_.ClearToEmpty();
  ::memset(&topk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_decimal_) -
      reinterpret_cast<char*>(&topk_)) + sizeof(round_decimal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 topk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metric_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metric_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.plan.QueryInfo.metric_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string search_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_search_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.plan.QueryInfo.search_params"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 round_decimal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          round_decimal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.QueryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 topk = 1;
  if (this->topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_topk(), target);
  }

  // string metric_type = 3;
  if (!this->metric_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric_type().data(), static_cast<int>(this->_internal_metric_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.plan.QueryInfo.metric_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metric_type(), target);
  }

  // string search_params = 4;
  if (!this->search_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_params().data(), static_cast<int>(this->_internal_search_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.plan.QueryInfo.search_params");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_search_params(), target);
  }

  // int64 round_decimal = 5;
  if (this->round_decimal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_round_decimal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.QueryInfo)
  return target;
}

size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.QueryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_type = 3;
  if (!this->metric_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric_type());
  }

  // string search_params = 4;
  if (!this->search_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_params());
  }

  // int64 topk = 1;
  if (this->topk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_topk());
  }

  // int64 round_decimal = 5;
  if (this->round_decimal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_round_decimal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.QueryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.QueryInfo)
    MergeFrom(*source);
  }
}

void QueryInfo::MergeFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.metric_type().empty()) {
    _internal_set_metric_type(from._internal_metric_type());
  }
  if (!from.search_params().empty()) {
    _internal_set_search_params(from._internal_search_params());
  }
  if (from.topk() != 0) {
    _internal_set_topk(from._internal_topk());
  }
  if (from.round_decimal() != 0) {
    _internal_set_round_decimal(from._internal_round_decimal());
  }
}

void QueryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  return true;
}

void QueryInfo::InternalSwap(QueryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metric_type_, GetArenaForAllocation(),
      &other->metric_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_params_, GetArenaForAllocation(),
      &other->search_params_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryInfo, round_decimal_)
      + sizeof(QueryInfo::round_decimal_)
      - PROTOBUF_FIELD_OFFSET(QueryInfo, topk_)>(
          reinterpret_cast<char*>(&topk_),
          reinterpret_cast<char*>(&other->topk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[1]);
}

// ===================================================================

class ColumnInfo::_Internal {
 public:
};

ColumnInfo::ColumnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ColumnInfo)
}
ColumnInfo::ColumnInfo(const ColumnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_autoid_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(is_autoid_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ColumnInfo)
}

void ColumnInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_autoid_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(is_autoid_));
}

ColumnInfo::~ColumnInfo() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ColumnInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColumnInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnInfo::ArenaDtor(void* object) {
  ColumnInfo* _this = reinterpret_cast< ColumnInfo* >(object);
  (void)_this;
}
void ColumnInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ColumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_autoid_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(is_autoid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.schema.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::milvus::proto::schema::DataType>(val));
        } else goto handle_unusual;
        continue;
      // bool is_primary_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_primary_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_autoID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_autoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ColumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 field_id = 1;
  if (this->field_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_field_id(), target);
  }

  // .milvus.proto.schema.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // bool is_primary_key = 3;
  if (this->is_primary_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_primary_key(), target);
  }

  // bool is_autoID = 4;
  if (this->is_autoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_autoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ColumnInfo)
  return target;
}

size_t ColumnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ColumnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 field_id = 1;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_field_id());
  }

  // .milvus.proto.schema.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // bool is_primary_key = 3;
  if (this->is_primary_key() != 0) {
    total_size += 1 + 1;
  }

  // bool is_autoID = 4;
  if (this->is_autoid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.ColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.ColumnInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.ColumnInfo)
    MergeFrom(*source);
  }
}

void ColumnInfo::MergeFrom(const ColumnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ColumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_id() != 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.is_primary_key() != 0) {
    _internal_set_is_primary_key(from._internal_is_primary_key());
  }
  if (from.is_autoid() != 0) {
    _internal_set_is_autoid(from._internal_is_autoid());
  }
}

void ColumnInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.ColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnInfo::CopyFrom(const ColumnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ColumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnInfo::IsInitialized() const {
  return true;
}

void ColumnInfo::InternalSwap(ColumnInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnInfo, is_autoid_)
      + sizeof(ColumnInfo::is_autoid_)
      - PROTOBUF_FIELD_OFFSET(ColumnInfo, field_id_)>(
          reinterpret_cast<char*>(&field_id_),
          reinterpret_cast<char*>(&other->field_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[2]);
}

// ===================================================================

class ColumnExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& info(const ColumnExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
ColumnExpr::_Internal::info(const ColumnExpr* msg) {
  return *msg->info_;
}
ColumnExpr::ColumnExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ColumnExpr)
}
ColumnExpr::ColumnExpr(const ColumnExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::milvus::proto::plan::ColumnInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ColumnExpr)
}

void ColumnExpr::SharedCtor() {
info_ = nullptr;
}

ColumnExpr::~ColumnExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ColumnExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColumnExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void ColumnExpr::ArenaDtor(void* object) {
  ColumnExpr* _this = reinterpret_cast< ColumnExpr* >(object);
  (void)_this;
}
void ColumnExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ColumnExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ColumnExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ColumnExpr)
  return target;
}

size_t ColumnExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ColumnExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.ColumnExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.ColumnExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.ColumnExpr)
    MergeFrom(*source);
  }
}

void ColumnExpr::MergeFrom(const ColumnExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ColumnExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_info());
  }
}

void ColumnExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.ColumnExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnExpr::CopyFrom(const ColumnExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ColumnExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnExpr::IsInitialized() const {
  return true;
}

void ColumnExpr::InternalSwap(ColumnExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[3]);
}

// ===================================================================

class ValueExpr::_Internal {
 public:
  static const ::milvus::proto::plan::GenericValue& value(const ValueExpr* msg);
};

const ::milvus::proto::plan::GenericValue&
ValueExpr::_Internal::value(const ValueExpr* msg) {
  return *msg->value_;
}
ValueExpr::ValueExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.ValueExpr)
}
ValueExpr::ValueExpr(const ValueExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::milvus::proto::plan::GenericValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.ValueExpr)
}

void ValueExpr::SharedCtor() {
value_ = nullptr;
}

ValueExpr::~ValueExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.ValueExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValueExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void ValueExpr::ArenaDtor(void* object) {
  ValueExpr* _this = reinterpret_cast< ValueExpr* >(object);
  (void)_this;
}
void ValueExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.ValueExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.GenericValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.ValueExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.GenericValue value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.ValueExpr)
  return target;
}

size_t ValueExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.ValueExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.GenericValue value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.ValueExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.ValueExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.ValueExpr)
    MergeFrom(*source);
  }
}

void ValueExpr::MergeFrom(const ValueExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.ValueExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_value());
  }
}

void ValueExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.ValueExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueExpr::CopyFrom(const ValueExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.ValueExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueExpr::IsInitialized() const {
  return true;
}

void ValueExpr::InternalSwap(ValueExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[4]);
}

// ===================================================================

class UnaryRangeExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& column_info(const UnaryRangeExpr* msg);
  static const ::milvus::proto::plan::GenericValue& value(const UnaryRangeExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
UnaryRangeExpr::_Internal::column_info(const UnaryRangeExpr* msg) {
  return *msg->column_info_;
}
const ::milvus::proto::plan::GenericValue&
UnaryRangeExpr::_Internal::value(const UnaryRangeExpr* msg) {
  return *msg->value_;
}
UnaryRangeExpr::UnaryRangeExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.UnaryRangeExpr)
}
UnaryRangeExpr::UnaryRangeExpr(const UnaryRangeExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_info()) {
    column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.column_info_);
  } else {
    column_info_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::milvus::proto::plan::GenericValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.UnaryRangeExpr)
}

void UnaryRangeExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&column_info_)) + sizeof(op_));
}

UnaryRangeExpr::~UnaryRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.UnaryRangeExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnaryRangeExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_info_;
  if (this != internal_default_instance()) delete value_;
}

void UnaryRangeExpr::ArenaDtor(void* object) {
  UnaryRangeExpr* _this = reinterpret_cast< UnaryRangeExpr* >(object);
  (void)_this;
}
void UnaryRangeExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnaryRangeExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnaryRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.UnaryRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && column_info_ != nullptr) {
    delete column_info_;
  }
  column_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnaryRangeExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.OpType op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::OpType>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnaryRangeExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.UnaryRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_info(this), target, stream);
  }

  // .milvus.proto.plan.OpType op = 2;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_op(), target);
  }

  // .milvus.proto.plan.GenericValue value = 3;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.UnaryRangeExpr)
  return target;
}

size_t UnaryRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.UnaryRangeExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_info_);
  }

  // .milvus.proto.plan.GenericValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .milvus.proto.plan.OpType op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaryRangeExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.UnaryRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryRangeExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnaryRangeExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.UnaryRangeExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.UnaryRangeExpr)
    MergeFrom(*source);
  }
}

void UnaryRangeExpr::MergeFrom(const UnaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.UnaryRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_column_info()) {
    _internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_column_info());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_value());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void UnaryRangeExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.UnaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryRangeExpr::CopyFrom(const UnaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.UnaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryRangeExpr::IsInitialized() const {
  return true;
}

void UnaryRangeExpr::InternalSwap(UnaryRangeExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, op_)
      + sizeof(UnaryRangeExpr::op_)
      - PROTOBUF_FIELD_OFFSET(UnaryRangeExpr, column_info_)>(
          reinterpret_cast<char*>(&column_info_),
          reinterpret_cast<char*>(&other->column_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnaryRangeExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[5]);
}

// ===================================================================

class BinaryRangeExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryRangeExpr* msg);
  static const ::milvus::proto::plan::GenericValue& lower_value(const BinaryRangeExpr* msg);
  static const ::milvus::proto::plan::GenericValue& upper_value(const BinaryRangeExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
BinaryRangeExpr::_Internal::column_info(const BinaryRangeExpr* msg) {
  return *msg->column_info_;
}
const ::milvus::proto::plan::GenericValue&
BinaryRangeExpr::_Internal::lower_value(const BinaryRangeExpr* msg) {
  return *msg->lower_value_;
}
const ::milvus::proto::plan::GenericValue&
BinaryRangeExpr::_Internal::upper_value(const BinaryRangeExpr* msg) {
  return *msg->upper_value_;
}
BinaryRangeExpr::BinaryRangeExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryRangeExpr)
}
BinaryRangeExpr::BinaryRangeExpr(const BinaryRangeExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_info()) {
    column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.column_info_);
  } else {
    column_info_ = nullptr;
  }
  if (from._internal_has_lower_value()) {
    lower_value_ = new ::milvus::proto::plan::GenericValue(*from.lower_value_);
  } else {
    lower_value_ = nullptr;
  }
  if (from._internal_has_upper_value()) {
    upper_value_ = new ::milvus::proto::plan::GenericValue(*from.upper_value_);
  } else {
    upper_value_ = nullptr;
  }
  ::memcpy(&lower_inclusive_, &from.lower_inclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_inclusive_) -
    reinterpret_cast<char*>(&lower_inclusive_)) + sizeof(upper_inclusive_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryRangeExpr)
}

void BinaryRangeExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_inclusive_) -
    reinterpret_cast<char*>(&column_info_)) + sizeof(upper_inclusive_));
}

BinaryRangeExpr::~BinaryRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryRangeExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryRangeExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_info_;
  if (this != internal_default_instance()) delete lower_value_;
  if (this != internal_default_instance()) delete upper_value_;
}

void BinaryRangeExpr::ArenaDtor(void* object) {
  BinaryRangeExpr* _this = reinterpret_cast< BinaryRangeExpr* >(object);
  (void)_this;
}
void BinaryRangeExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryRangeExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && column_info_ != nullptr) {
    delete column_info_;
  }
  column_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lower_value_ != nullptr) {
    delete lower_value_;
  }
  lower_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && upper_value_ != nullptr) {
    delete upper_value_;
  }
  upper_value_ = nullptr;
  ::memset(&lower_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_inclusive_) -
      reinterpret_cast<char*>(&lower_inclusive_)) + sizeof(upper_inclusive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryRangeExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lower_inclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lower_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool upper_inclusive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upper_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue lower_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue upper_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryRangeExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_info(this), target, stream);
  }

  // bool lower_inclusive = 2;
  if (this->lower_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_lower_inclusive(), target);
  }

  // bool upper_inclusive = 3;
  if (this->upper_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_upper_inclusive(), target);
  }

  // .milvus.proto.plan.GenericValue lower_value = 4;
  if (this->has_lower_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lower_value(this), target, stream);
  }

  // .milvus.proto.plan.GenericValue upper_value = 5;
  if (this->has_upper_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::upper_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryRangeExpr)
  return target;
}

size_t BinaryRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryRangeExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_info_);
  }

  // .milvus.proto.plan.GenericValue lower_value = 4;
  if (this->has_lower_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lower_value_);
  }

  // .milvus.proto.plan.GenericValue upper_value = 5;
  if (this->has_upper_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_value_);
  }

  // bool lower_inclusive = 2;
  if (this->lower_inclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool upper_inclusive = 3;
  if (this->upper_inclusive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryRangeExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.BinaryRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryRangeExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryRangeExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.BinaryRangeExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.BinaryRangeExpr)
    MergeFrom(*source);
  }
}

void BinaryRangeExpr::MergeFrom(const BinaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_column_info()) {
    _internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_column_info());
  }
  if (from.has_lower_value()) {
    _internal_mutable_lower_value()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_lower_value());
  }
  if (from.has_upper_value()) {
    _internal_mutable_upper_value()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_upper_value());
  }
  if (from.lower_inclusive() != 0) {
    _internal_set_lower_inclusive(from._internal_lower_inclusive());
  }
  if (from.upper_inclusive() != 0) {
    _internal_set_upper_inclusive(from._internal_upper_inclusive());
  }
}

void BinaryRangeExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.BinaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryRangeExpr::CopyFrom(const BinaryRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryRangeExpr::IsInitialized() const {
  return true;
}

void BinaryRangeExpr::InternalSwap(BinaryRangeExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, upper_inclusive_)
      + sizeof(BinaryRangeExpr::upper_inclusive_)
      - PROTOBUF_FIELD_OFFSET(BinaryRangeExpr, column_info_)>(
          reinterpret_cast<char*>(&column_info_),
          reinterpret_cast<char*>(&other->column_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryRangeExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[6]);
}

// ===================================================================

class CompareExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& left_column_info(const CompareExpr* msg);
  static const ::milvus::proto::plan::ColumnInfo& right_column_info(const CompareExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
CompareExpr::_Internal::left_column_info(const CompareExpr* msg) {
  return *msg->left_column_info_;
}
const ::milvus::proto::plan::ColumnInfo&
CompareExpr::_Internal::right_column_info(const CompareExpr* msg) {
  return *msg->right_column_info_;
}
CompareExpr::CompareExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.CompareExpr)
}
CompareExpr::CompareExpr(const CompareExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_column_info()) {
    left_column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.left_column_info_);
  } else {
    left_column_info_ = nullptr;
  }
  if (from._internal_has_right_column_info()) {
    right_column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.right_column_info_);
  } else {
    right_column_info_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.CompareExpr)
}

void CompareExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_column_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&left_column_info_)) + sizeof(op_));
}

CompareExpr::~CompareExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.CompareExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompareExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_column_info_;
  if (this != internal_default_instance()) delete right_column_info_;
}

void CompareExpr::ArenaDtor(void* object) {
  CompareExpr* _this = reinterpret_cast< CompareExpr* >(object);
  (void)_this;
}
void CompareExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompareExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompareExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.CompareExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && left_column_info_ != nullptr) {
    delete left_column_info_;
  }
  left_column_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_column_info_ != nullptr) {
    delete right_column_info_;
  }
  right_column_info_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo left_column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ColumnInfo right_column_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.OpType op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::OpType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.CompareExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo left_column_info = 1;
  if (this->has_left_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left_column_info(this), target, stream);
  }

  // .milvus.proto.plan.ColumnInfo right_column_info = 2;
  if (this->has_right_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right_column_info(this), target, stream);
  }

  // .milvus.proto.plan.OpType op = 3;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.CompareExpr)
  return target;
}

size_t CompareExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.CompareExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo left_column_info = 1;
  if (this->has_left_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_column_info_);
  }

  // .milvus.proto.plan.ColumnInfo right_column_info = 2;
  if (this->has_right_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_column_info_);
  }

  // .milvus.proto.plan.OpType op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.CompareExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const CompareExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompareExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.CompareExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.CompareExpr)
    MergeFrom(*source);
  }
}

void CompareExpr::MergeFrom(const CompareExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.CompareExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_column_info()) {
    _internal_mutable_left_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_left_column_info());
  }
  if (from.has_right_column_info()) {
    _internal_mutable_right_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_right_column_info());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void CompareExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.CompareExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareExpr::CopyFrom(const CompareExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.CompareExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareExpr::IsInitialized() const {
  return true;
}

void CompareExpr::InternalSwap(CompareExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareExpr, op_)
      + sizeof(CompareExpr::op_)
      - PROTOBUF_FIELD_OFFSET(CompareExpr, left_column_info_)>(
          reinterpret_cast<char*>(&left_column_info_),
          reinterpret_cast<char*>(&other->left_column_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[7]);
}

// ===================================================================

class TermExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& column_info(const TermExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
TermExpr::_Internal::column_info(const TermExpr* msg) {
  return *msg->column_info_;
}
TermExpr::TermExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.TermExpr)
}
TermExpr::TermExpr(const TermExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_info()) {
    column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.column_info_);
  } else {
    column_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.TermExpr)
}

void TermExpr::SharedCtor() {
column_info_ = nullptr;
}

TermExpr::~TermExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.TermExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TermExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_info_;
}

void TermExpr::ArenaDtor(void* object) {
  TermExpr* _this = reinterpret_cast< TermExpr* >(object);
  (void)_this;
}
void TermExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TermExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TermExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.TermExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArenaForAllocation() == nullptr && column_info_ != nullptr) {
    delete column_info_;
  }
  column_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TermExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .milvus.proto.plan.GenericValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TermExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.TermExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_info(this), target, stream);
  }

  // repeated .milvus.proto.plan.GenericValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.TermExpr)
  return target;
}

size_t TermExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.TermExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .milvus.proto.plan.GenericValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TermExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.TermExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const TermExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TermExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.TermExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.TermExpr)
    MergeFrom(*source);
  }
}

void TermExpr::MergeFrom(const TermExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.TermExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_column_info()) {
    _internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_column_info());
  }
}

void TermExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.TermExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermExpr::CopyFrom(const TermExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.TermExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermExpr::IsInitialized() const {
  return true;
}

void TermExpr::InternalSwap(TermExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(column_info_, other->column_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TermExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[8]);
}

// ===================================================================

class UnaryExpr::_Internal {
 public:
  static const ::milvus::proto::plan::Expr& child(const UnaryExpr* msg);
};

const ::milvus::proto::plan::Expr&
UnaryExpr::_Internal::child(const UnaryExpr* msg) {
  return *msg->child_;
}
UnaryExpr::UnaryExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.UnaryExpr)
}
UnaryExpr::UnaryExpr(const UnaryExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::milvus::proto::plan::Expr(*from.child_);
  } else {
    child_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.UnaryExpr)
}

void UnaryExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&child_)) + sizeof(op_));
}

UnaryExpr::~UnaryExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.UnaryExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnaryExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void UnaryExpr::ArenaDtor(void* object) {
  UnaryExpr* _this = reinterpret_cast< UnaryExpr* >(object);
  (void)_this;
}
void UnaryExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnaryExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnaryExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.UnaryExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnaryExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::UnaryExpr_UnaryOp>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnaryExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.UnaryExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .milvus.proto.plan.Expr child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.UnaryExpr)
  return target;
}

size_t UnaryExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.UnaryExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // .milvus.proto.plan.UnaryExpr.UnaryOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaryExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.UnaryExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnaryExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.UnaryExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.UnaryExpr)
    MergeFrom(*source);
  }
}

void UnaryExpr::MergeFrom(const UnaryExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.UnaryExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::milvus::proto::plan::Expr::MergeFrom(from._internal_child());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void UnaryExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.UnaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryExpr::CopyFrom(const UnaryExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.UnaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryExpr::IsInitialized() const {
  return true;
}

void UnaryExpr::InternalSwap(UnaryExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnaryExpr, op_)
      + sizeof(UnaryExpr::op_)
      - PROTOBUF_FIELD_OFFSET(UnaryExpr, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnaryExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[9]);
}

// ===================================================================

class BinaryExpr::_Internal {
 public:
  static const ::milvus::proto::plan::Expr& left(const BinaryExpr* msg);
  static const ::milvus::proto::plan::Expr& right(const BinaryExpr* msg);
};

const ::milvus::proto::plan::Expr&
BinaryExpr::_Internal::left(const BinaryExpr* msg) {
  return *msg->left_;
}
const ::milvus::proto::plan::Expr&
BinaryExpr::_Internal::right(const BinaryExpr* msg) {
  return *msg->right_;
}
BinaryExpr::BinaryExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryExpr)
}
BinaryExpr::BinaryExpr(const BinaryExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::milvus::proto::plan::Expr(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::milvus::proto::plan::Expr(*from.right_);
  } else {
    right_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryExpr)
}

void BinaryExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&left_)) + sizeof(op_));
}

BinaryExpr::~BinaryExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void BinaryExpr::ArenaDtor(void* object) {
  BinaryExpr* _this = reinterpret_cast< BinaryExpr* >(object);
  (void)_this;
}
void BinaryExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::BinaryExpr_BinaryOp>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .milvus.proto.plan.Expr left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .milvus.proto.plan.Expr right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryExpr)
  return target;
}

size_t BinaryExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .milvus.proto.plan.Expr right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .milvus.proto.plan.BinaryExpr.BinaryOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.BinaryExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.BinaryExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.BinaryExpr)
    MergeFrom(*source);
  }
}

void BinaryExpr::MergeFrom(const BinaryExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::milvus::proto::plan::Expr::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::milvus::proto::plan::Expr::MergeFrom(from._internal_right());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BinaryExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.BinaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryExpr::CopyFrom(const BinaryExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryExpr::IsInitialized() const {
  return true;
}

void BinaryExpr::InternalSwap(BinaryExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryExpr, op_)
      + sizeof(BinaryExpr::op_)
      - PROTOBUF_FIELD_OFFSET(BinaryExpr, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[10]);
}

// ===================================================================

class BinaryArithOp::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryArithOp* msg);
  static const ::milvus::proto::plan::GenericValue& right_operand(const BinaryArithOp* msg);
};

const ::milvus::proto::plan::ColumnInfo&
BinaryArithOp::_Internal::column_info(const BinaryArithOp* msg) {
  return *msg->column_info_;
}
const ::milvus::proto::plan::GenericValue&
BinaryArithOp::_Internal::right_operand(const BinaryArithOp* msg) {
  return *msg->right_operand_;
}
BinaryArithOp::BinaryArithOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithOp)
}
BinaryArithOp::BinaryArithOp(const BinaryArithOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_info()) {
    column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.column_info_);
  } else {
    column_info_ = nullptr;
  }
  if (from._internal_has_right_operand()) {
    right_operand_ = new ::milvus::proto::plan::GenericValue(*from.right_operand_);
  } else {
    right_operand_ = nullptr;
  }
  arith_op_ = from.arith_op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithOp)
}

void BinaryArithOp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arith_op_) -
    reinterpret_cast<char*>(&column_info_)) + sizeof(arith_op_));
}

BinaryArithOp::~BinaryArithOp() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryArithOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_info_;
  if (this != internal_default_instance()) delete right_operand_;
}

void BinaryArithOp::ArenaDtor(void* object) {
  BinaryArithOp* _this = reinterpret_cast< BinaryArithOp* >(object);
  (void)_this;
}
void BinaryArithOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryArithOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryArithOp::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && column_info_ != nullptr) {
    delete column_info_;
  }
  column_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_operand_ != nullptr) {
    delete right_operand_;
  }
  right_operand_ = nullptr;
  arith_op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryArithOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ArithOpType arith_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arith_op(static_cast<::milvus::proto::plan::ArithOpType>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue right_operand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_operand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryArithOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_info(this), target, stream);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->arith_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_arith_op(), target);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (this->has_right_operand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_operand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithOp)
  return target;
}

size_t BinaryArithOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_info_);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (this->has_right_operand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_operand_);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->arith_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arith_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryArithOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.BinaryArithOp)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryArithOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryArithOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.BinaryArithOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.BinaryArithOp)
    MergeFrom(*source);
  }
}

void BinaryArithOp::MergeFrom(const BinaryArithOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_column_info()) {
    _internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_column_info());
  }
  if (from.has_right_operand()) {
    _internal_mutable_right_operand()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_right_operand());
  }
  if (from.arith_op() != 0) {
    _internal_set_arith_op(from._internal_arith_op());
  }
}

void BinaryArithOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.BinaryArithOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryArithOp::CopyFrom(const BinaryArithOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryArithOp::IsInitialized() const {
  return true;
}

void BinaryArithOp::InternalSwap(BinaryArithOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithOp, arith_op_)
      + sizeof(BinaryArithOp::arith_op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithOp, column_info_)>(
          reinterpret_cast<char*>(&column_info_),
          reinterpret_cast<char*>(&other->column_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryArithOp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[11]);
}

// ===================================================================

class BinaryArithExpr::_Internal {
 public:
  static const ::milvus::proto::plan::Expr& left(const BinaryArithExpr* msg);
  static const ::milvus::proto::plan::Expr& right(const BinaryArithExpr* msg);
};

const ::milvus::proto::plan::Expr&
BinaryArithExpr::_Internal::left(const BinaryArithExpr* msg) {
  return *msg->left_;
}
const ::milvus::proto::plan::Expr&
BinaryArithExpr::_Internal::right(const BinaryArithExpr* msg) {
  return *msg->right_;
}
BinaryArithExpr::BinaryArithExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithExpr)
}
BinaryArithExpr::BinaryArithExpr(const BinaryArithExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::milvus::proto::plan::Expr(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::milvus::proto::plan::Expr(*from.right_);
  } else {
    right_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithExpr)
}

void BinaryArithExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&left_)) + sizeof(op_));
}

BinaryArithExpr::~BinaryArithExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryArithExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void BinaryArithExpr::ArenaDtor(void* object) {
  BinaryArithExpr* _this = reinterpret_cast< BinaryArithExpr* >(object);
  (void)_this;
}
void BinaryArithExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryArithExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryArithExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryArithExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.Expr left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ArithOpType op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::ArithOpType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryArithExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr left = 1;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left(this), target, stream);
  }

  // .milvus.proto.plan.Expr right = 2;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right(this), target, stream);
  }

  // .milvus.proto.plan.ArithOpType op = 3;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithExpr)
  return target;
}

size_t BinaryArithExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.Expr left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .milvus.proto.plan.Expr right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .milvus.proto.plan.ArithOpType op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryArithExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.BinaryArithExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryArithExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryArithExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.BinaryArithExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.BinaryArithExpr)
    MergeFrom(*source);
  }
}

void BinaryArithExpr::MergeFrom(const BinaryArithExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::milvus::proto::plan::Expr::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::milvus::proto::plan::Expr::MergeFrom(from._internal_right());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BinaryArithExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.BinaryArithExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryArithExpr::CopyFrom(const BinaryArithExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryArithExpr::IsInitialized() const {
  return true;
}

void BinaryArithExpr::InternalSwap(BinaryArithExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithExpr, op_)
      + sizeof(BinaryArithExpr::op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithExpr, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryArithExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[12]);
}

// ===================================================================

class BinaryArithOpEvalRangeExpr::_Internal {
 public:
  static const ::milvus::proto::plan::ColumnInfo& column_info(const BinaryArithOpEvalRangeExpr* msg);
  static const ::milvus::proto::plan::GenericValue& right_operand(const BinaryArithOpEvalRangeExpr* msg);
  static const ::milvus::proto::plan::GenericValue& value(const BinaryArithOpEvalRangeExpr* msg);
};

const ::milvus::proto::plan::ColumnInfo&
BinaryArithOpEvalRangeExpr::_Internal::column_info(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->column_info_;
}
const ::milvus::proto::plan::GenericValue&
BinaryArithOpEvalRangeExpr::_Internal::right_operand(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->right_operand_;
}
const ::milvus::proto::plan::GenericValue&
BinaryArithOpEvalRangeExpr::_Internal::value(const BinaryArithOpEvalRangeExpr* msg) {
  return *msg->value_;
}
BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
}
BinaryArithOpEvalRangeExpr::BinaryArithOpEvalRangeExpr(const BinaryArithOpEvalRangeExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_info()) {
    column_info_ = new ::milvus::proto::plan::ColumnInfo(*from.column_info_);
  } else {
    column_info_ = nullptr;
  }
  if (from._internal_has_right_operand()) {
    right_operand_ = new ::milvus::proto::plan::GenericValue(*from.right_operand_);
  } else {
    right_operand_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::milvus::proto::plan::GenericValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&arith_op_, &from.arith_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&arith_op_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
}

void BinaryArithOpEvalRangeExpr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&column_info_)) + sizeof(op_));
}

BinaryArithOpEvalRangeExpr::~BinaryArithOpEvalRangeExpr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryArithOpEvalRangeExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_info_;
  if (this != internal_default_instance()) delete right_operand_;
  if (this != internal_default_instance()) delete value_;
}

void BinaryArithOpEvalRangeExpr::ArenaDtor(void* object) {
  BinaryArithOpEvalRangeExpr* _this = reinterpret_cast< BinaryArithOpEvalRangeExpr* >(object);
  (void)_this;
}
void BinaryArithOpEvalRangeExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryArithOpEvalRangeExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryArithOpEvalRangeExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && column_info_ != nullptr) {
    delete column_info_;
  }
  column_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_operand_ != nullptr) {
    delete right_operand_;
  }
  right_operand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&arith_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&arith_op_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryArithOpEvalRangeExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.ColumnInfo column_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ArithOpType arith_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arith_op(static_cast<::milvus::proto::plan::ArithOpType>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue right_operand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_operand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.OpType op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::milvus::proto::plan::OpType>(val));
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.GenericValue value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryArithOpEvalRangeExpr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_info(this), target, stream);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->arith_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_arith_op(), target);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (this->has_right_operand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right_operand(this), target, stream);
  }

  // .milvus.proto.plan.OpType op = 4;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  // .milvus.proto.plan.GenericValue value = 5;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  return target;
}

size_t BinaryArithOpEvalRangeExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .milvus.proto.plan.ColumnInfo column_info = 1;
  if (this->has_column_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_info_);
  }

  // .milvus.proto.plan.GenericValue right_operand = 3;
  if (this->has_right_operand()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_operand_);
  }

  // .milvus.proto.plan.GenericValue value = 5;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .milvus.proto.plan.ArithOpType arith_op = 2;
  if (this->arith_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arith_op());
  }

  // .milvus.proto.plan.OpType op = 4;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryArithOpEvalRangeExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryArithOpEvalRangeExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryArithOpEvalRangeExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
    MergeFrom(*source);
  }
}

void BinaryArithOpEvalRangeExpr::MergeFrom(const BinaryArithOpEvalRangeExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_column_info()) {
    _internal_mutable_column_info()->::milvus::proto::plan::ColumnInfo::MergeFrom(from._internal_column_info());
  }
  if (from.has_right_operand()) {
    _internal_mutable_right_operand()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_right_operand());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::milvus::proto::plan::GenericValue::MergeFrom(from._internal_value());
  }
  if (from.arith_op() != 0) {
    _internal_set_arith_op(from._internal_arith_op());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BinaryArithOpEvalRangeExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryArithOpEvalRangeExpr::CopyFrom(const BinaryArithOpEvalRangeExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.BinaryArithOpEvalRangeExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryArithOpEvalRangeExpr::IsInitialized() const {
  return true;
}

void BinaryArithOpEvalRangeExpr::InternalSwap(BinaryArithOpEvalRangeExpr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, op_)
      + sizeof(BinaryArithOpEvalRangeExpr::op_)
      - PROTOBUF_FIELD_OFFSET(BinaryArithOpEvalRangeExpr, column_info_)>(
          reinterpret_cast<char*>(&column_info_),
          reinterpret_cast<char*>(&other->column_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryArithOpEvalRangeExpr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[13]);
}

// ===================================================================

class Expr::_Internal {
 public:
  static const ::milvus::proto::plan::TermExpr& term_expr(const Expr* msg);
  static const ::milvus::proto::plan::UnaryExpr& unary_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryExpr& binary_expr(const Expr* msg);
  static const ::milvus::proto::plan::CompareExpr& compare_expr(const Expr* msg);
  static const ::milvus::proto::plan::UnaryRangeExpr& unary_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryRangeExpr& binary_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryArithOpEvalRangeExpr& binary_arith_op_eval_range_expr(const Expr* msg);
  static const ::milvus::proto::plan::BinaryArithExpr& binary_arith_expr(const Expr* msg);
  static const ::milvus::proto::plan::ValueExpr& value_expr(const Expr* msg);
  static const ::milvus::proto::plan::ColumnExpr& column_expr(const Expr* msg);
};

const ::milvus::proto::plan::TermExpr&
Expr::_Internal::term_expr(const Expr* msg) {
  return *msg->expr_.term_expr_;
}
const ::milvus::proto::plan::UnaryExpr&
Expr::_Internal::unary_expr(const Expr* msg) {
  return *msg->expr_.unary_expr_;
}
const ::milvus::proto::plan::BinaryExpr&
Expr::_Internal::binary_expr(const Expr* msg) {
  return *msg->expr_.binary_expr_;
}
const ::milvus::proto::plan::CompareExpr&
Expr::_Internal::compare_expr(const Expr* msg) {
  return *msg->expr_.compare_expr_;
}
const ::milvus::proto::plan::UnaryRangeExpr&
Expr::_Internal::unary_range_expr(const Expr* msg) {
  return *msg->expr_.unary_range_expr_;
}
const ::milvus::proto::plan::BinaryRangeExpr&
Expr::_Internal::binary_range_expr(const Expr* msg) {
  return *msg->expr_.binary_range_expr_;
}
const ::milvus::proto::plan::BinaryArithOpEvalRangeExpr&
Expr::_Internal::binary_arith_op_eval_range_expr(const Expr* msg) {
  return *msg->expr_.binary_arith_op_eval_range_expr_;
}
const ::milvus::proto::plan::BinaryArithExpr&
Expr::_Internal::binary_arith_expr(const Expr* msg) {
  return *msg->expr_.binary_arith_expr_;
}
const ::milvus::proto::plan::ValueExpr&
Expr::_Internal::value_expr(const Expr* msg) {
  return *msg->expr_.value_expr_;
}
const ::milvus::proto::plan::ColumnExpr&
Expr::_Internal::column_expr(const Expr* msg) {
  return *msg->expr_.column_expr_;
}
void Expr::set_allocated_term_expr(::milvus::proto::plan::TermExpr* term_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (term_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::TermExpr>::GetOwningArena(term_expr);
    if (message_arena != submessage_arena) {
      term_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, term_expr, submessage_arena);
    }
    set_has_term_expr();
    expr_.term_expr_ = term_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.term_expr)
}
void Expr::set_allocated_unary_expr(::milvus::proto::plan::UnaryExpr* unary_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (unary_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::UnaryExpr>::GetOwningArena(unary_expr);
    if (message_arena != submessage_arena) {
      unary_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unary_expr, submessage_arena);
    }
    set_has_unary_expr();
    expr_.unary_expr_ = unary_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.unary_expr)
}
void Expr::set_allocated_binary_expr(::milvus::proto::plan::BinaryExpr* binary_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (binary_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::BinaryExpr>::GetOwningArena(binary_expr);
    if (message_arena != submessage_arena) {
      binary_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_expr, submessage_arena);
    }
    set_has_binary_expr();
    expr_.binary_expr_ = binary_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_expr)
}
void Expr::set_allocated_compare_expr(::milvus::proto::plan::CompareExpr* compare_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (compare_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::CompareExpr>::GetOwningArena(compare_expr);
    if (message_arena != submessage_arena) {
      compare_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compare_expr, submessage_arena);
    }
    set_has_compare_expr();
    expr_.compare_expr_ = compare_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.compare_expr)
}
void Expr::set_allocated_unary_range_expr(::milvus::proto::plan::UnaryRangeExpr* unary_range_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (unary_range_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::UnaryRangeExpr>::GetOwningArena(unary_range_expr);
    if (message_arena != submessage_arena) {
      unary_range_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unary_range_expr, submessage_arena);
    }
    set_has_unary_range_expr();
    expr_.unary_range_expr_ = unary_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.unary_range_expr)
}
void Expr::set_allocated_binary_range_expr(::milvus::proto::plan::BinaryRangeExpr* binary_range_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (binary_range_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::BinaryRangeExpr>::GetOwningArena(binary_range_expr);
    if (message_arena != submessage_arena) {
      binary_range_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_range_expr, submessage_arena);
    }
    set_has_binary_range_expr();
    expr_.binary_range_expr_ = binary_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_range_expr)
}
void Expr::set_allocated_binary_arith_op_eval_range_expr(::milvus::proto::plan::BinaryArithOpEvalRangeExpr* binary_arith_op_eval_range_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (binary_arith_op_eval_range_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::BinaryArithOpEvalRangeExpr>::GetOwningArena(binary_arith_op_eval_range_expr);
    if (message_arena != submessage_arena) {
      binary_arith_op_eval_range_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_arith_op_eval_range_expr, submessage_arena);
    }
    set_has_binary_arith_op_eval_range_expr();
    expr_.binary_arith_op_eval_range_expr_ = binary_arith_op_eval_range_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_arith_op_eval_range_expr)
}
void Expr::set_allocated_binary_arith_expr(::milvus::proto::plan::BinaryArithExpr* binary_arith_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (binary_arith_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::BinaryArithExpr>::GetOwningArena(binary_arith_expr);
    if (message_arena != submessage_arena) {
      binary_arith_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary_arith_expr, submessage_arena);
    }
    set_has_binary_arith_expr();
    expr_.binary_arith_expr_ = binary_arith_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.binary_arith_expr)
}
void Expr::set_allocated_value_expr(::milvus::proto::plan::ValueExpr* value_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (value_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::ValueExpr>::GetOwningArena(value_expr);
    if (message_arena != submessage_arena) {
      value_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_expr, submessage_arena);
    }
    set_has_value_expr();
    expr_.value_expr_ = value_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.value_expr)
}
void Expr::set_allocated_column_expr(::milvus::proto::plan::ColumnExpr* column_expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (column_expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::ColumnExpr>::GetOwningArena(column_expr);
    if (message_arena != submessage_arena) {
      column_expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_expr, submessage_arena);
    }
    set_has_column_expr();
    expr_.column_expr_ = column_expr;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.Expr.column_expr)
}
Expr::Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.Expr)
}
Expr::Expr(const Expr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_expr();
  switch (from.expr_case()) {
    case kTermExpr: {
      _internal_mutable_term_expr()->::milvus::proto::plan::TermExpr::MergeFrom(from._internal_term_expr());
      break;
    }
    case kUnaryExpr: {
      _internal_mutable_unary_expr()->::milvus::proto::plan::UnaryExpr::MergeFrom(from._internal_unary_expr());
      break;
    }
    case kBinaryExpr: {
      _internal_mutable_binary_expr()->::milvus::proto::plan::BinaryExpr::MergeFrom(from._internal_binary_expr());
      break;
    }
    case kCompareExpr: {
      _internal_mutable_compare_expr()->::milvus::proto::plan::CompareExpr::MergeFrom(from._internal_compare_expr());
      break;
    }
    case kUnaryRangeExpr: {
      _internal_mutable_unary_range_expr()->::milvus::proto::plan::UnaryRangeExpr::MergeFrom(from._internal_unary_range_expr());
      break;
    }
    case kBinaryRangeExpr: {
      _internal_mutable_binary_range_expr()->::milvus::proto::plan::BinaryRangeExpr::MergeFrom(from._internal_binary_range_expr());
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      _internal_mutable_binary_arith_op_eval_range_expr()->::milvus::proto::plan::BinaryArithOpEvalRangeExpr::MergeFrom(from._internal_binary_arith_op_eval_range_expr());
      break;
    }
    case kBinaryArithExpr: {
      _internal_mutable_binary_arith_expr()->::milvus::proto::plan::BinaryArithExpr::MergeFrom(from._internal_binary_arith_expr());
      break;
    }
    case kValueExpr: {
      _internal_mutable_value_expr()->::milvus::proto::plan::ValueExpr::MergeFrom(from._internal_value_expr());
      break;
    }
    case kColumnExpr: {
      _internal_mutable_column_expr()->::milvus::proto::plan::ColumnExpr::MergeFrom(from._internal_column_expr());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.Expr)
}

void Expr::SharedCtor() {
clear_has_expr();
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.Expr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Expr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_expr()) {
    clear_expr();
  }
}

void Expr::ArenaDtor(void* object) {
  Expr* _this = reinterpret_cast< Expr* >(object);
  (void)_this;
}
void Expr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expr::clear_expr() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.Expr)
  switch (expr_case()) {
    case kTermExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.term_expr_;
      }
      break;
    }
    case kUnaryExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.unary_expr_;
      }
      break;
    }
    case kBinaryExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.binary_expr_;
      }
      break;
    }
    case kCompareExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.compare_expr_;
      }
      break;
    }
    case kUnaryRangeExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.unary_range_expr_;
      }
      break;
    }
    case kBinaryRangeExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.binary_range_expr_;
      }
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.binary_arith_op_eval_range_expr_;
      }
      break;
    }
    case kBinaryArithExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.binary_arith_expr_;
      }
      break;
    }
    case kValueExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.value_expr_;
      }
      break;
    }
    case kColumnExpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.column_expr_;
      }
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_NOT_SET;
}


void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.Expr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.TermExpr term_expr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_term_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.UnaryExpr unary_expr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unary_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.BinaryExpr binary_expr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.CompareExpr compare_expr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unary_range_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_range_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_arith_op_eval_range_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary_arith_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ValueExpr value_expr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.ColumnExpr column_expr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.Expr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.TermExpr term_expr = 1;
  if (_internal_has_term_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::term_expr(this), target, stream);
  }

  // .milvus.proto.plan.UnaryExpr unary_expr = 2;
  if (_internal_has_unary_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::unary_expr(this), target, stream);
  }

  // .milvus.proto.plan.BinaryExpr binary_expr = 3;
  if (_internal_has_binary_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::binary_expr(this), target, stream);
  }

  // .milvus.proto.plan.CompareExpr compare_expr = 4;
  if (_internal_has_compare_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::compare_expr(this), target, stream);
  }

  // .milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;
  if (_internal_has_unary_range_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::unary_range_expr(this), target, stream);
  }

  // .milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;
  if (_internal_has_binary_range_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::binary_range_expr(this), target, stream);
  }

  // .milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
  if (_internal_has_binary_arith_op_eval_range_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::binary_arith_op_eval_range_expr(this), target, stream);
  }

  // .milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;
  if (_internal_has_binary_arith_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::binary_arith_expr(this), target, stream);
  }

  // .milvus.proto.plan.ValueExpr value_expr = 9;
  if (_internal_has_value_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::value_expr(this), target, stream);
  }

  // .milvus.proto.plan.ColumnExpr column_expr = 10;
  if (_internal_has_column_expr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::column_expr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.Expr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (expr_case()) {
    // .milvus.proto.plan.TermExpr term_expr = 1;
    case kTermExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.term_expr_);
      break;
    }
    // .milvus.proto.plan.UnaryExpr unary_expr = 2;
    case kUnaryExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.unary_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryExpr binary_expr = 3;
    case kBinaryExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.binary_expr_);
      break;
    }
    // .milvus.proto.plan.CompareExpr compare_expr = 4;
    case kCompareExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.compare_expr_);
      break;
    }
    // .milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;
    case kUnaryRangeExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.unary_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;
    case kBinaryRangeExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.binary_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;
    case kBinaryArithOpEvalRangeExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.binary_arith_op_eval_range_expr_);
      break;
    }
    // .milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;
    case kBinaryArithExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.binary_arith_expr_);
      break;
    }
    // .milvus.proto.plan.ValueExpr value_expr = 9;
    case kValueExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.value_expr_);
      break;
    }
    // .milvus.proto.plan.ColumnExpr column_expr = 10;
    case kColumnExpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expr_.column_expr_);
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  const Expr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Expr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.Expr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.Expr)
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expr_case()) {
    case kTermExpr: {
      _internal_mutable_term_expr()->::milvus::proto::plan::TermExpr::MergeFrom(from._internal_term_expr());
      break;
    }
    case kUnaryExpr: {
      _internal_mutable_unary_expr()->::milvus::proto::plan::UnaryExpr::MergeFrom(from._internal_unary_expr());
      break;
    }
    case kBinaryExpr: {
      _internal_mutable_binary_expr()->::milvus::proto::plan::BinaryExpr::MergeFrom(from._internal_binary_expr());
      break;
    }
    case kCompareExpr: {
      _internal_mutable_compare_expr()->::milvus::proto::plan::CompareExpr::MergeFrom(from._internal_compare_expr());
      break;
    }
    case kUnaryRangeExpr: {
      _internal_mutable_unary_range_expr()->::milvus::proto::plan::UnaryRangeExpr::MergeFrom(from._internal_unary_range_expr());
      break;
    }
    case kBinaryRangeExpr: {
      _internal_mutable_binary_range_expr()->::milvus::proto::plan::BinaryRangeExpr::MergeFrom(from._internal_binary_range_expr());
      break;
    }
    case kBinaryArithOpEvalRangeExpr: {
      _internal_mutable_binary_arith_op_eval_range_expr()->::milvus::proto::plan::BinaryArithOpEvalRangeExpr::MergeFrom(from._internal_binary_arith_op_eval_range_expr());
      break;
    }
    case kBinaryArithExpr: {
      _internal_mutable_binary_arith_expr()->::milvus::proto::plan::BinaryArithExpr::MergeFrom(from._internal_binary_arith_expr());
      break;
    }
    case kValueExpr: {
      _internal_mutable_value_expr()->::milvus::proto::plan::ValueExpr::MergeFrom(from._internal_value_expr());
      break;
    }
    case kColumnExpr: {
      _internal_mutable_column_expr()->::milvus::proto::plan::ColumnExpr::MergeFrom(from._internal_column_expr());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
}

void Expr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  return true;
}

void Expr::InternalSwap(Expr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(expr_, other->expr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[14]);
}

// ===================================================================

class VectorANNS::_Internal {
 public:
  static const ::milvus::proto::plan::Expr& predicates(const VectorANNS* msg);
  static const ::milvus::proto::plan::QueryInfo& query_info(const VectorANNS* msg);
};

const ::milvus::proto::plan::Expr&
VectorANNS::_Internal::predicates(const VectorANNS* msg) {
  return *msg->predicates_;
}
const ::milvus::proto::plan::QueryInfo&
VectorANNS::_Internal::query_info(const VectorANNS* msg) {
  return *msg->query_info_;
}
VectorANNS::VectorANNS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.VectorANNS)
}
VectorANNS::VectorANNS(const VectorANNS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  placeholder_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placeholder_tag().empty()) {
    placeholder_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_placeholder_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_predicates()) {
    predicates_ = new ::milvus::proto::plan::Expr(*from.predicates_);
  } else {
    predicates_ = nullptr;
  }
  if (from._internal_has_query_info()) {
    query_info_ = new ::milvus::proto::plan::QueryInfo(*from.query_info_);
  } else {
    query_info_ = nullptr;
  }
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_binary_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(is_binary_));
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.VectorANNS)
}

void VectorANNS::SharedCtor() {
placeholder_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicates_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_binary_) -
    reinterpret_cast<char*>(&predicates_)) + sizeof(is_binary_));
}

VectorANNS::~VectorANNS() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.VectorANNS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorANNS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  placeholder_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete predicates_;
  if (this != internal_default_instance()) delete query_info_;
}

void VectorANNS::ArenaDtor(void* object) {
  VectorANNS* _this = reinterpret_cast< VectorANNS* >(object);
  (void)_this;
}
void VectorANNS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorANNS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorANNS::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.VectorANNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  placeholder_tag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && predicates_ != nullptr) {
    delete predicates_;
  }
  predicates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && query_info_ != nullptr) {
    delete query_info_;
  }
  query_info_ = nullptr;
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_binary_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(is_binary_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorANNS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 field_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr predicates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.QueryInfo query_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeholder_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_placeholder_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "milvus.proto.plan.VectorANNS.placeholder_tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorANNS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.VectorANNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_binary = 1;
  if (this->is_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_binary(), target);
  }

  // int64 field_id = 2;
  if (this->field_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_field_id(), target);
  }

  // .milvus.proto.plan.Expr predicates = 3;
  if (this->has_predicates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::predicates(this), target, stream);
  }

  // .milvus.proto.plan.QueryInfo query_info = 4;
  if (this->has_query_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::query_info(this), target, stream);
  }

  // string placeholder_tag = 5;
  if (!this->placeholder_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeholder_tag().data(), static_cast<int>(this->_internal_placeholder_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "milvus.proto.plan.VectorANNS.placeholder_tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholder_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.VectorANNS)
  return target;
}

size_t VectorANNS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.VectorANNS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string placeholder_tag = 5;
  if (!this->placeholder_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeholder_tag());
  }

  // .milvus.proto.plan.Expr predicates = 3;
  if (this->has_predicates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicates_);
  }

  // .milvus.proto.plan.QueryInfo query_info = 4;
  if (this->has_query_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_info_);
  }

  // int64 field_id = 2;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_field_id());
  }

  // bool is_binary = 1;
  if (this->is_binary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorANNS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.VectorANNS)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorANNS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorANNS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.VectorANNS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.VectorANNS)
    MergeFrom(*source);
  }
}

void VectorANNS::MergeFrom(const VectorANNS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.VectorANNS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.placeholder_tag().empty()) {
    _internal_set_placeholder_tag(from._internal_placeholder_tag());
  }
  if (from.has_predicates()) {
    _internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(from._internal_predicates());
  }
  if (from.has_query_info()) {
    _internal_mutable_query_info()->::milvus::proto::plan::QueryInfo::MergeFrom(from._internal_query_info());
  }
  if (from.field_id() != 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  if (from.is_binary() != 0) {
    _internal_set_is_binary(from._internal_is_binary());
  }
}

void VectorANNS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.VectorANNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorANNS::CopyFrom(const VectorANNS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.VectorANNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorANNS::IsInitialized() const {
  return true;
}

void VectorANNS::InternalSwap(VectorANNS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &placeholder_tag_, GetArenaForAllocation(),
      &other->placeholder_tag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorANNS, is_binary_)
      + sizeof(VectorANNS::is_binary_)
      - PROTOBUF_FIELD_OFFSET(VectorANNS, predicates_)>(
          reinterpret_cast<char*>(&predicates_),
          reinterpret_cast<char*>(&other->predicates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorANNS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[15]);
}

// ===================================================================

class PlanNode::_Internal {
 public:
  static const ::milvus::proto::plan::VectorANNS& vector_anns(const PlanNode* msg);
  static const ::milvus::proto::plan::Expr& predicates(const PlanNode* msg);
};

const ::milvus::proto::plan::VectorANNS&
PlanNode::_Internal::vector_anns(const PlanNode* msg) {
  return *msg->node_.vector_anns_;
}
const ::milvus::proto::plan::Expr&
PlanNode::_Internal::predicates(const PlanNode* msg) {
  return *msg->node_.predicates_;
}
void PlanNode::set_allocated_vector_anns(::milvus::proto::plan::VectorANNS* vector_anns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (vector_anns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::VectorANNS>::GetOwningArena(vector_anns);
    if (message_arena != submessage_arena) {
      vector_anns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_anns, submessage_arena);
    }
    set_has_vector_anns();
    node_.vector_anns_ = vector_anns;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.PlanNode.vector_anns)
}
void PlanNode::set_allocated_predicates(::milvus::proto::plan::Expr* predicates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (predicates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::plan::Expr>::GetOwningArena(predicates);
    if (message_arena != submessage_arena) {
      predicates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicates, submessage_arena);
    }
    set_has_predicates();
    node_.predicates_ = predicates;
  }
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.plan.PlanNode.predicates)
}
PlanNode::PlanNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_field_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:milvus.proto.plan.PlanNode)
}
PlanNode::PlanNode(const PlanNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      output_field_ids_(from.output_field_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kVectorAnns: {
      _internal_mutable_vector_anns()->::milvus::proto::plan::VectorANNS::MergeFrom(from._internal_vector_anns());
      break;
    }
    case kPredicates: {
      _internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(from._internal_predicates());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:milvus.proto.plan.PlanNode)
}

void PlanNode::SharedCtor() {
clear_has_node();
}

PlanNode::~PlanNode() {
  // @@protoc_insertion_point(destructor:milvus.proto.plan.PlanNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void PlanNode::ArenaDtor(void* object) {
  PlanNode* _this = reinterpret_cast< PlanNode* >(object);
  (void)_this;
}
void PlanNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:milvus.proto.plan.PlanNode)
  switch (node_case()) {
    case kVectorAnns: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.vector_anns_;
      }
      break;
    }
    case kPredicates: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.predicates_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void PlanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:milvus.proto.plan.PlanNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_field_ids_.Clear();
  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .milvus.proto.plan.VectorANNS vector_anns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_anns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .milvus.proto.plan.Expr predicates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 output_field_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_field_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_output_field_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:milvus.proto.plan.PlanNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .milvus.proto.plan.VectorANNS vector_anns = 1;
  if (_internal_has_vector_anns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vector_anns(this), target, stream);
  }

  // .milvus.proto.plan.Expr predicates = 2;
  if (_internal_has_predicates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::predicates(this), target, stream);
  }

  // repeated int64 output_field_ids = 3;
  {
    int byte_size = _output_field_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_output_field_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:milvus.proto.plan.PlanNode)
  return target;
}

size_t PlanNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:milvus.proto.plan.PlanNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 output_field_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->output_field_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _output_field_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (node_case()) {
    // .milvus.proto.plan.VectorANNS vector_anns = 1;
    case kVectorAnns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.vector_anns_);
      break;
    }
    // .milvus.proto.plan.Expr predicates = 2;
    case kPredicates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.predicates_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:milvus.proto.plan.PlanNode)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:milvus.proto.plan.PlanNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:milvus.proto.plan.PlanNode)
    MergeFrom(*source);
  }
}

void PlanNode::MergeFrom(const PlanNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:milvus.proto.plan.PlanNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_field_ids_.MergeFrom(from.output_field_ids_);
  switch (from.node_case()) {
    case kVectorAnns: {
      _internal_mutable_vector_anns()->::milvus::proto::plan::VectorANNS::MergeFrom(from._internal_vector_anns());
      break;
    }
    case kPredicates: {
      _internal_mutable_predicates()->::milvus::proto::plan::Expr::MergeFrom(from._internal_predicates());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void PlanNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:milvus.proto.plan.PlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanNode::CopyFrom(const PlanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:milvus.proto.plan.PlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanNode::IsInitialized() const {
  return true;
}

void PlanNode::InternalSwap(PlanNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  output_field_ids_.InternalSwap(&other->output_field_ids_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plan_2eproto_getter, &descriptor_table_plan_2eproto_once,
      file_level_metadata_plan_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plan
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::GenericValue* Arena::CreateMaybeMessage< ::milvus::proto::plan::GenericValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::GenericValue >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::QueryInfo* Arena::CreateMaybeMessage< ::milvus::proto::plan::QueryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::QueryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::ColumnInfo* Arena::CreateMaybeMessage< ::milvus::proto::plan::ColumnInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::ColumnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::ColumnExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::ColumnExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::ColumnExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::ValueExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::ValueExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::ValueExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::UnaryRangeExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::UnaryRangeExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::UnaryRangeExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::BinaryRangeExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::BinaryRangeExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::BinaryRangeExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::CompareExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::CompareExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::CompareExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::TermExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::TermExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::TermExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::UnaryExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::UnaryExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::UnaryExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::BinaryExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::BinaryExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::BinaryExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::BinaryArithOp* Arena::CreateMaybeMessage< ::milvus::proto::plan::BinaryArithOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::BinaryArithOp >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::BinaryArithExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::BinaryArithExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::BinaryArithExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::BinaryArithOpEvalRangeExpr* Arena::CreateMaybeMessage< ::milvus::proto::plan::BinaryArithOpEvalRangeExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::BinaryArithOpEvalRangeExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::Expr* Arena::CreateMaybeMessage< ::milvus::proto::plan::Expr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::Expr >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::VectorANNS* Arena::CreateMaybeMessage< ::milvus::proto::plan::VectorANNS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::VectorANNS >(arena);
}
template<> PROTOBUF_NOINLINE ::milvus::proto::plan::PlanNode* Arena::CreateMaybeMessage< ::milvus::proto::plan::PlanNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::milvus::proto::plan::PlanNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
