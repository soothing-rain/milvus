// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace milvus {
namespace proto {
namespace common {
class Address;
struct AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Blob;
struct BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class DMLMsgHeader;
struct DMLMsgHeaderDefaultTypeInternal;
extern DMLMsgHeaderDefaultTypeInternal _DMLMsgHeader_default_instance_;
class KeyDataPair;
struct KeyDataPairDefaultTypeInternal;
extern KeyDataPairDefaultTypeInternal _KeyDataPair_default_instance_;
class KeyValuePair;
struct KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MsgBase;
struct MsgBaseDefaultTypeInternal;
extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class PlaceholderGroup;
struct PlaceholderGroupDefaultTypeInternal;
extern PlaceholderGroupDefaultTypeInternal _PlaceholderGroup_default_instance_;
class PlaceholderValue;
struct PlaceholderValueDefaultTypeInternal;
extern PlaceholderValueDefaultTypeInternal _PlaceholderValue_default_instance_;
class PrivilegeExt;
struct PrivilegeExtDefaultTypeInternal;
extern PrivilegeExtDefaultTypeInternal _PrivilegeExt_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::common::Address* Arena::CreateMaybeMessage<::milvus::proto::common::Address>(Arena*);
template<> ::milvus::proto::common::Blob* Arena::CreateMaybeMessage<::milvus::proto::common::Blob>(Arena*);
template<> ::milvus::proto::common::DMLMsgHeader* Arena::CreateMaybeMessage<::milvus::proto::common::DMLMsgHeader>(Arena*);
template<> ::milvus::proto::common::KeyDataPair* Arena::CreateMaybeMessage<::milvus::proto::common::KeyDataPair>(Arena*);
template<> ::milvus::proto::common::KeyValuePair* Arena::CreateMaybeMessage<::milvus::proto::common::KeyValuePair>(Arena*);
template<> ::milvus::proto::common::MsgBase* Arena::CreateMaybeMessage<::milvus::proto::common::MsgBase>(Arena*);
template<> ::milvus::proto::common::MsgHeader* Arena::CreateMaybeMessage<::milvus::proto::common::MsgHeader>(Arena*);
template<> ::milvus::proto::common::PlaceholderGroup* Arena::CreateMaybeMessage<::milvus::proto::common::PlaceholderGroup>(Arena*);
template<> ::milvus::proto::common::PlaceholderValue* Arena::CreateMaybeMessage<::milvus::proto::common::PlaceholderValue>(Arena*);
template<> ::milvus::proto::common::PrivilegeExt* Arena::CreateMaybeMessage<::milvus::proto::common::PrivilegeExt>(Arena*);
template<> ::milvus::proto::common::Status* Arena::CreateMaybeMessage<::milvus::proto::common::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace common {

enum ErrorCode : int {
  Success = 0,
  UnexpectedError = 1,
  ConnectFailed = 2,
  PermissionDenied = 3,
  CollectionNotExists = 4,
  IllegalArgument = 5,
  IllegalDimension = 7,
  IllegalIndexType = 8,
  IllegalCollectionName = 9,
  IllegalTOPK = 10,
  IllegalRowRecord = 11,
  IllegalVectorID = 12,
  IllegalSearchResult = 13,
  FileNotFound = 14,
  MetaFailed = 15,
  CacheFailed = 16,
  CannotCreateFolder = 17,
  CannotCreateFile = 18,
  CannotDeleteFolder = 19,
  CannotDeleteFile = 20,
  BuildIndexError = 21,
  IllegalNLIST = 22,
  IllegalMetricType = 23,
  OutOfMemory = 24,
  IndexNotExist = 25,
  EmptyCollection = 26,
  UpdateImportTaskFailure = 27,
  CollectionNameNotFound = 28,
  CreateCredentialFailure = 29,
  UpdateCredentialFailure = 30,
  DeleteCredentialFailure = 31,
  GetCredentialFailure = 32,
  ListCredUsersFailure = 33,
  GetUserFailure = 34,
  CreateRoleFailure = 35,
  DropRoleFailure = 36,
  OperateUserRoleFailure = 37,
  SelectRoleFailure = 38,
  SelectUserFailure = 39,
  SelectResourceFailure = 40,
  OperatePrivilegeFailure = 41,
  SelectGrantFailure = 42,
  RefreshPolicyInfoCacheFailure = 43,
  ListPolicyFailure = 44,
  NotShardLeader = 45,
  NoReplicaAvailable = 46,
  SegmentNotFound = 47,
  DDRequestRace = 1000,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = Success;
constexpr ErrorCode ErrorCode_MAX = DDRequestRace;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum IndexState : int {
  IndexStateNone = 0,
  Unissued = 1,
  InProgress = 2,
  Finished = 3,
  Failed = 4,
  IndexState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndexState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndexState_IsValid(int value);
constexpr IndexState IndexState_MIN = IndexStateNone;
constexpr IndexState IndexState_MAX = Failed;
constexpr int IndexState_ARRAYSIZE = IndexState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexState_descriptor();
template<typename T>
inline const std::string& IndexState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexState_descriptor(), enum_t_value);
}
inline bool IndexState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IndexState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexState>(
    IndexState_descriptor(), name, value);
}
enum SegmentState : int {
  SegmentStateNone = 0,
  NotExist = 1,
  Growing = 2,
  Sealed = 3,
  Flushed = 4,
  Flushing = 5,
  Dropped = 6,
  Importing = 7,
  SegmentState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SegmentState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SegmentState_IsValid(int value);
constexpr SegmentState SegmentState_MIN = SegmentStateNone;
constexpr SegmentState SegmentState_MAX = Importing;
constexpr int SegmentState_ARRAYSIZE = SegmentState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentState_descriptor();
template<typename T>
inline const std::string& SegmentState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SegmentState_descriptor(), enum_t_value);
}
inline bool SegmentState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SegmentState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SegmentState>(
    SegmentState_descriptor(), name, value);
}
enum PlaceholderType : int {
  None = 0,
  BinaryVector = 100,
  FloatVector = 101,
  PlaceholderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlaceholderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlaceholderType_IsValid(int value);
constexpr PlaceholderType PlaceholderType_MIN = None;
constexpr PlaceholderType PlaceholderType_MAX = FloatVector;
constexpr int PlaceholderType_ARRAYSIZE = PlaceholderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderType_descriptor();
template<typename T>
inline const std::string& PlaceholderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlaceholderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlaceholderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlaceholderType_descriptor(), enum_t_value);
}
inline bool PlaceholderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlaceholderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaceholderType>(
    PlaceholderType_descriptor(), name, value);
}
enum MsgType : int {
  Undefined = 0,
  CreateCollection = 100,
  DropCollection = 101,
  HasCollection = 102,
  DescribeCollection = 103,
  ShowCollections = 104,
  GetSystemConfigs = 105,
  LoadCollection = 106,
  ReleaseCollection = 107,
  CreateAlias = 108,
  DropAlias = 109,
  AlterAlias = 110,
  CreatePartition = 200,
  DropPartition = 201,
  HasPartition = 202,
  DescribePartition = 203,
  ShowPartitions = 204,
  LoadPartitions = 205,
  ReleasePartitions = 206,
  ShowSegments = 250,
  DescribeSegment = 251,
  LoadSegments = 252,
  ReleaseSegments = 253,
  HandoffSegments = 254,
  LoadBalanceSegments = 255,
  DescribeSegments = 256,
  CreateIndex = 300,
  DescribeIndex = 301,
  DropIndex = 302,
  Insert = 400,
  Delete = 401,
  Flush = 402,
  ResendSegmentStats = 403,
  Search = 500,
  SearchResult = 501,
  GetIndexState = 502,
  GetIndexBuildProgress = 503,
  GetCollectionStatistics = 504,
  GetPartitionStatistics = 505,
  Retrieve = 506,
  RetrieveResult = 507,
  WatchDmChannels = 508,
  RemoveDmChannels = 509,
  WatchQueryChannels = 510,
  RemoveQueryChannels = 511,
  SealedSegmentsChangeInfo = 512,
  WatchDeltaChannels = 513,
  GetShardLeaders = 514,
  GetReplicas = 515,
  SegmentInfo = 600,
  SystemInfo = 601,
  GetRecoveryInfo = 602,
  GetSegmentState = 603,
  TimeTick = 1200,
  QueryNodeStats = 1201,
  LoadIndex = 1202,
  RequestID = 1203,
  RequestTSO = 1204,
  AllocateSegment = 1205,
  SegmentStatistics = 1206,
  SegmentFlushDone = 1207,
  DataNodeTt = 1208,
  CreateCredential = 1500,
  GetCredential = 1501,
  DeleteCredential = 1502,
  UpdateCredential = 1503,
  ListCredUsernames = 1504,
  CreateRole = 1600,
  DropRole = 1601,
  OperateUserRole = 1602,
  SelectRole = 1603,
  SelectUser = 1604,
  SelectResource = 1605,
  OperatePrivilege = 1606,
  SelectGrant = 1607,
  RefreshPolicyInfoCache = 1608,
  ListPolicy = 1609,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = Undefined;
constexpr MsgType MsgType_MAX = ListPolicy;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum DslType : int {
  Dsl = 0,
  BoolExprV1 = 1,
  DslType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DslType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DslType_IsValid(int value);
constexpr DslType DslType_MIN = Dsl;
constexpr DslType DslType_MAX = BoolExprV1;
constexpr int DslType_ARRAYSIZE = DslType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DslType_descriptor();
template<typename T>
inline const std::string& DslType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DslType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DslType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DslType_descriptor(), enum_t_value);
}
inline bool DslType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DslType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DslType>(
    DslType_descriptor(), name, value);
}
enum CompactionState : int {
  UndefiedState = 0,
  Executing = 1,
  Completed = 2,
  CompactionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompactionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompactionState_IsValid(int value);
constexpr CompactionState CompactionState_MIN = UndefiedState;
constexpr CompactionState CompactionState_MAX = Completed;
constexpr int CompactionState_ARRAYSIZE = CompactionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompactionState_descriptor();
template<typename T>
inline const std::string& CompactionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompactionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompactionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompactionState_descriptor(), enum_t_value);
}
inline bool CompactionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompactionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompactionState>(
    CompactionState_descriptor(), name, value);
}
enum ConsistencyLevel : int {
  Strong = 0,
  Session = 1,
  Bounded = 2,
  Eventually = 3,
  Customized = 4,
  ConsistencyLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConsistencyLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConsistencyLevel_IsValid(int value);
constexpr ConsistencyLevel ConsistencyLevel_MIN = Strong;
constexpr ConsistencyLevel ConsistencyLevel_MAX = Customized;
constexpr int ConsistencyLevel_ARRAYSIZE = ConsistencyLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsistencyLevel_descriptor();
template<typename T>
inline const std::string& ConsistencyLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsistencyLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsistencyLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsistencyLevel_descriptor(), enum_t_value);
}
inline bool ConsistencyLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConsistencyLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsistencyLevel>(
    ConsistencyLevel_descriptor(), name, value);
}
enum ImportState : int {
  ImportPending = 0,
  ImportFailed = 1,
  ImportStarted = 2,
  ImportDownloaded = 3,
  ImportParsed = 4,
  ImportPersisted = 5,
  ImportCompleted = 6,
  ImportAllocSegment = 10,
  ImportState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImportState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImportState_IsValid(int value);
constexpr ImportState ImportState_MIN = ImportPending;
constexpr ImportState ImportState_MAX = ImportAllocSegment;
constexpr int ImportState_ARRAYSIZE = ImportState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportState_descriptor();
template<typename T>
inline const std::string& ImportState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImportState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImportState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImportState_descriptor(), enum_t_value);
}
inline bool ImportState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImportState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImportState>(
    ImportState_descriptor(), name, value);
}
enum ResourceType : int {
  Collection = 0,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = Collection;
constexpr ResourceType ResourceType_MAX = Collection;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
enum ResourcePrivilege : int {
  PrivilegeAll = 0,
  PrivilegeCreate = 1,
  PrivilegeDrop = 2,
  PrivilegeAlter = 3,
  PrivilegeRead = 4,
  PrivilegeLoad = 5,
  PrivilegeRelease = 6,
  PrivilegeCompact = 7,
  PrivilegeInsert = 8,
  PrivilegeDelete = 9,
  ResourcePrivilege_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourcePrivilege_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourcePrivilege_IsValid(int value);
constexpr ResourcePrivilege ResourcePrivilege_MIN = PrivilegeAll;
constexpr ResourcePrivilege ResourcePrivilege_MAX = PrivilegeDelete;
constexpr int ResourcePrivilege_ARRAYSIZE = ResourcePrivilege_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourcePrivilege_descriptor();
template<typename T>
inline const std::string& ResourcePrivilege_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourcePrivilege>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourcePrivilege_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourcePrivilege_descriptor(), enum_t_value);
}
inline bool ResourcePrivilege_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourcePrivilege* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourcePrivilege>(
    ResourcePrivilege_descriptor(), name, value);
}
// ===================================================================

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return new Status();
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .milvus.proto.common.ErrorCode error_code = 1;
  void clear_error_code();
  ::milvus::proto::common::ErrorCode error_code() const;
  void set_error_code(::milvus::proto::common::ErrorCode value);
  private:
  ::milvus::proto::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::milvus::proto::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {}
  ~KeyValuePair() override;
  explicit constexpr KeyValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return new KeyValuePair();
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KeyDataPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.KeyDataPair) */ {
 public:
  inline KeyDataPair() : KeyDataPair(nullptr) {}
  ~KeyDataPair() override;
  explicit constexpr KeyDataPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDataPair(const KeyDataPair& from);
  KeyDataPair(KeyDataPair&& from) noexcept
    : KeyDataPair() {
    *this = ::std::move(from);
  }

  inline KeyDataPair& operator=(const KeyDataPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDataPair& operator=(KeyDataPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyDataPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDataPair* internal_default_instance() {
    return reinterpret_cast<const KeyDataPair*>(
               &_KeyDataPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyDataPair& a, KeyDataPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDataPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDataPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDataPair* New() const final {
    return new KeyDataPair();
  }

  KeyDataPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDataPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDataPair& from);
  void MergeFrom(const KeyDataPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDataPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.KeyDataPair";
  }
  protected:
  explicit KeyDataPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.KeyDataPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Blob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Blob) */ {
 public:
  inline Blob() : Blob(nullptr) {}
  ~Blob() override;
  explicit constexpr Blob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blob(const Blob& from);
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blob& default_instance() {
    return *internal_default_instance();
  }
  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blob* New() const final {
    return new Blob();
  }

  Blob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.Blob";
  }
  protected:
  explicit Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.Blob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PlaceholderValue) */ {
 public:
  inline PlaceholderValue() : PlaceholderValue(nullptr) {}
  ~PlaceholderValue() override;
  explicit constexpr PlaceholderValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderValue(const PlaceholderValue& from);
  PlaceholderValue(PlaceholderValue&& from) noexcept
    : PlaceholderValue() {
    *this = ::std::move(from);
  }

  inline PlaceholderValue& operator=(const PlaceholderValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderValue& operator=(PlaceholderValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderValue* internal_default_instance() {
    return reinterpret_cast<const PlaceholderValue*>(
               &_PlaceholderValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlaceholderValue& a, PlaceholderValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderValue* New() const final {
    return new PlaceholderValue();
  }

  PlaceholderValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderValue& from);
  void MergeFrom(const PlaceholderValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.PlaceholderValue";
  }
  protected:
  explicit PlaceholderValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kTagFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated bytes values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .milvus.proto.common.PlaceholderType type = 2;
  void clear_type();
  ::milvus::proto::common::PlaceholderType type() const;
  void set_type(::milvus::proto::common::PlaceholderType value);
  private:
  ::milvus::proto::common::PlaceholderType _internal_type() const;
  void _internal_set_type(::milvus::proto::common::PlaceholderType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.PlaceholderValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PlaceholderGroup) */ {
 public:
  inline PlaceholderGroup() : PlaceholderGroup(nullptr) {}
  ~PlaceholderGroup() override;
  explicit constexpr PlaceholderGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceholderGroup(const PlaceholderGroup& from);
  PlaceholderGroup(PlaceholderGroup&& from) noexcept
    : PlaceholderGroup() {
    *this = ::std::move(from);
  }

  inline PlaceholderGroup& operator=(const PlaceholderGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderGroup& operator=(PlaceholderGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceholderGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceholderGroup* internal_default_instance() {
    return reinterpret_cast<const PlaceholderGroup*>(
               &_PlaceholderGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlaceholderGroup& a, PlaceholderGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderGroup* New() const final {
    return new PlaceholderGroup();
  }

  PlaceholderGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderGroup& from);
  void MergeFrom(const PlaceholderGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.PlaceholderGroup";
  }
  protected:
  explicit PlaceholderGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 1,
  };
  // repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;
  public:
  void clear_placeholders();
  ::milvus::proto::common::PlaceholderValue* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >*
      mutable_placeholders();
  private:
  const ::milvus::proto::common::PlaceholderValue& _internal_placeholders(int index) const;
  ::milvus::proto::common::PlaceholderValue* _internal_add_placeholders();
  public:
  const ::milvus::proto::common::PlaceholderValue& placeholders(int index) const;
  ::milvus::proto::common::PlaceholderValue* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >&
      placeholders() const;

  // @@protoc_insertion_point(class_scope:milvus.proto.common.PlaceholderGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue > placeholders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  explicit constexpr Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return new Address();
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int64 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int64 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MsgBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.MsgBase) */ {
 public:
  inline MsgBase() : MsgBase(nullptr) {}
  ~MsgBase() override;
  explicit constexpr MsgBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBase(const MsgBase& from);
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBase* New() const final {
    return new MsgBase();
  }

  MsgBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.MsgBase";
  }
  protected:
  explicit MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIDFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSourceIDFieldNumber = 4,
    kMsgTypeFieldNumber = 1,
  };
  // int64 msgID = 2;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int64 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 sourceID = 4;
  void clear_sourceid();
  ::PROTOBUF_NAMESPACE_ID::int64 sourceid() const;
  void set_sourceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourceid() const;
  void _internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .milvus.proto.common.MsgType msg_type = 1;
  void clear_msg_type();
  ::milvus::proto::common::MsgType msg_type() const;
  void set_msg_type(::milvus::proto::common::MsgType value);
  private:
  ::milvus::proto::common::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::milvus::proto::common::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.MsgBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 msgid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourceid_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  explicit constexpr MsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHeader* New() const final {
    return new MsgHeader();
  }

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.common.MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DMLMsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.DMLMsgHeader) */ {
 public:
  inline DMLMsgHeader() : DMLMsgHeader(nullptr) {}
  ~DMLMsgHeader() override;
  explicit constexpr DMLMsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DMLMsgHeader(const DMLMsgHeader& from);
  DMLMsgHeader(DMLMsgHeader&& from) noexcept
    : DMLMsgHeader() {
    *this = ::std::move(from);
  }

  inline DMLMsgHeader& operator=(const DMLMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DMLMsgHeader& operator=(DMLMsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DMLMsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const DMLMsgHeader* internal_default_instance() {
    return reinterpret_cast<const DMLMsgHeader*>(
               &_DMLMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DMLMsgHeader& a, DMLMsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(DMLMsgHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DMLMsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DMLMsgHeader* New() const final {
    return new DMLMsgHeader();
  }

  DMLMsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DMLMsgHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DMLMsgHeader& from);
  void MergeFrom(const DMLMsgHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DMLMsgHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.DMLMsgHeader";
  }
  protected:
  explicit DMLMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardNameFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string shardName = 2;
  void clear_shardname();
  const std::string& shardname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shardname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shardname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shardname();
  void set_allocated_shardname(std::string* shardname);
  private:
  const std::string& _internal_shardname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shardname(const std::string& value);
  std::string* _internal_mutable_shardname();
  public:

  // .milvus.proto.common.MsgBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::milvus::proto::common::MsgBase& base() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::milvus::proto::common::MsgBase* release_base();
  ::milvus::proto::common::MsgBase* mutable_base();
  void set_allocated_base(::milvus::proto::common::MsgBase* base);
  private:
  const ::milvus::proto::common::MsgBase& _internal_base() const;
  ::milvus::proto::common::MsgBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::milvus::proto::common::MsgBase* base);
  ::milvus::proto::common::MsgBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:milvus.proto.common.DMLMsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shardname_;
  ::milvus::proto::common::MsgBase* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PrivilegeExt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.common.PrivilegeExt) */ {
 public:
  inline PrivilegeExt() : PrivilegeExt(nullptr) {}
  ~PrivilegeExt() override;
  explicit constexpr PrivilegeExt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivilegeExt(const PrivilegeExt& from);
  PrivilegeExt(PrivilegeExt&& from) noexcept
    : PrivilegeExt() {
    *this = ::std::move(from);
  }

  inline PrivilegeExt& operator=(const PrivilegeExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivilegeExt& operator=(PrivilegeExt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivilegeExt& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivilegeExt* internal_default_instance() {
    return reinterpret_cast<const PrivilegeExt*>(
               &_PrivilegeExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrivilegeExt& a, PrivilegeExt& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivilegeExt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivilegeExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivilegeExt* New() const final {
    return new PrivilegeExt();
  }

  PrivilegeExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivilegeExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivilegeExt& from);
  void MergeFrom(const PrivilegeExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivilegeExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.common.PrivilegeExt";
  }
  protected:
  explicit PrivilegeExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTypeFieldNumber = 1,
    kResourcePrivilegeFieldNumber = 2,
    kResourceNameIndexFieldNumber = 3,
  };
  // .milvus.proto.common.ResourceType resource_type = 1;
  void clear_resource_type();
  ::milvus::proto::common::ResourceType resource_type() const;
  void set_resource_type(::milvus::proto::common::ResourceType value);
  private:
  ::milvus::proto::common::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::milvus::proto::common::ResourceType value);
  public:

  // .milvus.proto.common.ResourcePrivilege resource_privilege = 2;
  void clear_resource_privilege();
  ::milvus::proto::common::ResourcePrivilege resource_privilege() const;
  void set_resource_privilege(::milvus::proto::common::ResourcePrivilege value);
  private:
  ::milvus::proto::common::ResourcePrivilege _internal_resource_privilege() const;
  void _internal_set_resource_privilege(::milvus::proto::common::ResourcePrivilege value);
  public:

  // int32 resource_name_index = 3;
  void clear_resource_name_index();
  ::PROTOBUF_NAMESPACE_ID::int32 resource_name_index() const;
  void set_resource_name_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resource_name_index() const;
  void _internal_set_resource_name_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.common.PrivilegeExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int resource_type_;
  int resource_privilege_;
  ::PROTOBUF_NAMESPACE_ID::int32 resource_name_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================

static const int kPrivilegeExtObjFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::milvus::proto::common::PrivilegeExt >, 11, false >
  privilege_ext_obj;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .milvus.proto.common.ErrorCode error_code = 1;
inline void Status::clear_error_code() {
  error_code_ = 0;
}
inline ::milvus::proto::common::ErrorCode Status::_internal_error_code() const {
  return static_cast< ::milvus::proto::common::ErrorCode >(error_code_);
}
inline ::milvus::proto::common::ErrorCode Status::error_code() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.error_code)
  return _internal_error_code();
}
inline void Status::_internal_set_error_code(::milvus::proto::common::ErrorCode value) {
  
  error_code_ = value;
}
inline void Status::set_error_code(::milvus::proto::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.error_code)
}

// string reason = 2;
inline void Status::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Status.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Status.reason)
}
inline std::string* Status::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Status.reason)
  return _internal_mutable_reason();
}
inline const std::string& Status::_internal_reason() const {
  return reason_.Get();
}
inline void Status::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.Status.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Status.reason)
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyValuePair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValuePair::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyValuePair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValuePair::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyValuePair.value)
}

// -------------------------------------------------------------------

// KeyDataPair

// string key = 1;
inline void KeyDataPair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyDataPair::key() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyDataPair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyDataPair::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyDataPair.key)
}
inline std::string* KeyDataPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyDataPair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyDataPair::_internal_key() const {
  return key_.Get();
}
inline void KeyDataPair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyDataPair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyDataPair::release_key() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyDataPair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyDataPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyDataPair.key)
}

// bytes data = 2;
inline void KeyDataPair::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& KeyDataPair::data() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.KeyDataPair.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyDataPair::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.KeyDataPair.data)
}
inline std::string* KeyDataPair::mutable_data() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.KeyDataPair.data)
  return _internal_mutable_data();
}
inline const std::string& KeyDataPair::_internal_data() const {
  return data_.Get();
}
inline void KeyDataPair::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyDataPair::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyDataPair::release_data() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.KeyDataPair.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyDataPair::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.KeyDataPair.data)
}

// -------------------------------------------------------------------

// Blob

// bytes value = 1;
inline void Blob::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Blob::value() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Blob.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Blob::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Blob.value)
}
inline std::string* Blob::mutable_value() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Blob.value)
  return _internal_mutable_value();
}
inline const std::string& Blob::_internal_value() const {
  return value_.Get();
}
inline void Blob::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_value() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.Blob.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Blob::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Blob.value)
}

// -------------------------------------------------------------------

// PlaceholderValue

// string tag = 1;
inline void PlaceholderValue::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& PlaceholderValue::tag() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlaceholderValue::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.tag)
}
inline std::string* PlaceholderValue::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderValue.tag)
  return _internal_mutable_tag();
}
inline const std::string& PlaceholderValue::_internal_tag() const {
  return tag_.Get();
}
inline void PlaceholderValue::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlaceholderValue::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlaceholderValue::release_tag() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.PlaceholderValue.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlaceholderValue::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.PlaceholderValue.tag)
}

// .milvus.proto.common.PlaceholderType type = 2;
inline void PlaceholderValue::clear_type() {
  type_ = 0;
}
inline ::milvus::proto::common::PlaceholderType PlaceholderValue::_internal_type() const {
  return static_cast< ::milvus::proto::common::PlaceholderType >(type_);
}
inline ::milvus::proto::common::PlaceholderType PlaceholderValue::type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.type)
  return _internal_type();
}
inline void PlaceholderValue::_internal_set_type(::milvus::proto::common::PlaceholderType value) {
  
  type_ = value;
}
inline void PlaceholderValue::set_type(::milvus::proto::common::PlaceholderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.type)
}

// repeated bytes values = 3;
inline int PlaceholderValue::_internal_values_size() const {
  return values_.size();
}
inline int PlaceholderValue::values_size() const {
  return _internal_values_size();
}
inline void PlaceholderValue::clear_values() {
  values_.Clear();
}
inline std::string* PlaceholderValue::add_values() {
  // @@protoc_insertion_point(field_add_mutable:milvus.proto.common.PlaceholderValue.values)
  return _internal_add_values();
}
inline const std::string& PlaceholderValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& PlaceholderValue::values(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderValue.values)
  return _internal_values(index);
}
inline std::string* PlaceholderValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderValue.values)
  return values_.Mutable(index);
}
inline void PlaceholderValue::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.values)
  values_.Mutable(index)->assign(value);
}
inline void PlaceholderValue::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:milvus.proto.common.PlaceholderValue.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void PlaceholderValue::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:milvus.proto.common.PlaceholderValue.values)
}
inline std::string* PlaceholderValue::_internal_add_values() {
  return values_.Add();
}
inline void PlaceholderValue::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:milvus.proto.common.PlaceholderValue.values)
}
inline void PlaceholderValue::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:milvus.proto.common.PlaceholderValue.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlaceholderValue::values() const {
  // @@protoc_insertion_point(field_list:milvus.proto.common.PlaceholderValue.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlaceholderValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.common.PlaceholderValue.values)
  return &values_;
}

// -------------------------------------------------------------------

// PlaceholderGroup

// repeated .milvus.proto.common.PlaceholderValue placeholders = 1;
inline int PlaceholderGroup::_internal_placeholders_size() const {
  return placeholders_.size();
}
inline int PlaceholderGroup::placeholders_size() const {
  return _internal_placeholders_size();
}
inline void PlaceholderGroup::clear_placeholders() {
  placeholders_.Clear();
}
inline ::milvus::proto::common::PlaceholderValue* PlaceholderGroup::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.PlaceholderGroup.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >*
PlaceholderGroup::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.common.PlaceholderGroup.placeholders)
  return &placeholders_;
}
inline const ::milvus::proto::common::PlaceholderValue& PlaceholderGroup::_internal_placeholders(int index) const {
  return placeholders_.Get(index);
}
inline const ::milvus::proto::common::PlaceholderValue& PlaceholderGroup::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PlaceholderGroup.placeholders)
  return _internal_placeholders(index);
}
inline ::milvus::proto::common::PlaceholderValue* PlaceholderGroup::_internal_add_placeholders() {
  return placeholders_.Add();
}
inline ::milvus::proto::common::PlaceholderValue* PlaceholderGroup::add_placeholders() {
  // @@protoc_insertion_point(field_add:milvus.proto.common.PlaceholderGroup.placeholders)
  return _internal_add_placeholders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::PlaceholderValue >&
PlaceholderGroup::placeholders() const {
  // @@protoc_insertion_point(field_list:milvus.proto.common.PlaceholderGroup.placeholders)
  return placeholders_;
}

// -------------------------------------------------------------------

// Address

// string ip = 1;
inline void Address::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Address::ip() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Address.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Address::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.Address.ip)
}
inline std::string* Address::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.Address.ip)
  return _internal_mutable_ip();
}
inline const std::string& Address::_internal_ip() const {
  return ip_.Get();
}
inline void Address::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Address::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Address::release_ip() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.Address.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Address::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.Address.ip)
}

// int64 port = 2;
inline void Address::clear_port() {
  port_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Address::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Address::port() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.Address.port)
  return _internal_port();
}
inline void Address::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  port_ = value;
}
inline void Address::set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.Address.port)
}

// -------------------------------------------------------------------

// MsgBase

// .milvus.proto.common.MsgType msg_type = 1;
inline void MsgBase::clear_msg_type() {
  msg_type_ = 0;
}
inline ::milvus::proto::common::MsgType MsgBase::_internal_msg_type() const {
  return static_cast< ::milvus::proto::common::MsgType >(msg_type_);
}
inline ::milvus::proto::common::MsgType MsgBase::msg_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.msg_type)
  return _internal_msg_type();
}
inline void MsgBase::_internal_set_msg_type(::milvus::proto::common::MsgType value) {
  
  msg_type_ = value;
}
inline void MsgBase::set_msg_type(::milvus::proto::common::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.msg_type)
}

// int64 msgID = 2;
inline void MsgBase::clear_msgid() {
  msgid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgBase::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgBase::msgid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.msgID)
  return _internal_msgid();
}
inline void MsgBase::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msgid_ = value;
}
inline void MsgBase::set_msgid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.msgID)
}

// uint64 timestamp = 3;
inline void MsgBase::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgBase::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgBase::timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.timestamp)
  return _internal_timestamp();
}
inline void MsgBase::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void MsgBase::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.timestamp)
}

// int64 sourceID = 4;
inline void MsgBase::clear_sourceid() {
  sourceid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgBase::_internal_sourceid() const {
  return sourceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgBase::sourceid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgBase.sourceID)
  return _internal_sourceid();
}
inline void MsgBase::_internal_set_sourceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sourceid_ = value;
}
inline void MsgBase::set_sourceid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.MsgBase.sourceID)
}

// -------------------------------------------------------------------

// MsgHeader

// .milvus.proto.common.MsgBase base = 1;
inline bool MsgHeader::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool MsgHeader::has_base() const {
  return _internal_has_base();
}
inline void MsgHeader::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::milvus::proto::common::MsgBase& MsgHeader::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& MsgHeader::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.MsgHeader.base)
  return _internal_base();
}
inline void MsgHeader::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.common.MsgHeader.base)
}
inline ::milvus::proto::common::MsgBase* MsgHeader::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.MsgHeader.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* MsgHeader::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.MsgHeader.base)
  return _internal_mutable_base();
}
inline void MsgHeader::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::common::MsgBase>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.MsgHeader.base)
}

// -------------------------------------------------------------------

// DMLMsgHeader

// .milvus.proto.common.MsgBase base = 1;
inline bool DMLMsgHeader::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DMLMsgHeader::has_base() const {
  return _internal_has_base();
}
inline void DMLMsgHeader::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::milvus::proto::common::MsgBase& DMLMsgHeader::_internal_base() const {
  const ::milvus::proto::common::MsgBase* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::common::MsgBase&>(
      ::milvus::proto::common::_MsgBase_default_instance_);
}
inline const ::milvus::proto::common::MsgBase& DMLMsgHeader::base() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.DMLMsgHeader.base)
  return _internal_base();
}
inline void DMLMsgHeader::unsafe_arena_set_allocated_base(
    ::milvus::proto::common::MsgBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.common.DMLMsgHeader.base)
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::release_base() {
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.DMLMsgHeader.base)
  
  ::milvus::proto::common::MsgBase* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::common::MsgBase>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::milvus::proto::common::MsgBase* DMLMsgHeader::mutable_base() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.DMLMsgHeader.base)
  return _internal_mutable_base();
}
inline void DMLMsgHeader::set_allocated_base(::milvus::proto::common::MsgBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::milvus::proto::common::MsgBase>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.DMLMsgHeader.base)
}

// string shardName = 2;
inline void DMLMsgHeader::clear_shardname() {
  shardname_.ClearToEmpty();
}
inline const std::string& DMLMsgHeader::shardname() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.DMLMsgHeader.shardName)
  return _internal_shardname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DMLMsgHeader::set_shardname(ArgT0&& arg0, ArgT... args) {
 
 shardname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.common.DMLMsgHeader.shardName)
}
inline std::string* DMLMsgHeader::mutable_shardname() {
  // @@protoc_insertion_point(field_mutable:milvus.proto.common.DMLMsgHeader.shardName)
  return _internal_mutable_shardname();
}
inline const std::string& DMLMsgHeader::_internal_shardname() const {
  return shardname_.Get();
}
inline void DMLMsgHeader::_internal_set_shardname(const std::string& value) {
  
  shardname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DMLMsgHeader::_internal_mutable_shardname() {
  
  return shardname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DMLMsgHeader::release_shardname() {
  // @@protoc_insertion_point(field_release:milvus.proto.common.DMLMsgHeader.shardName)
  return shardname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DMLMsgHeader::set_allocated_shardname(std::string* shardname) {
  if (shardname != nullptr) {
    
  } else {
    
  }
  shardname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shardname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.common.DMLMsgHeader.shardName)
}

// -------------------------------------------------------------------

// PrivilegeExt

// .milvus.proto.common.ResourceType resource_type = 1;
inline void PrivilegeExt::clear_resource_type() {
  resource_type_ = 0;
}
inline ::milvus::proto::common::ResourceType PrivilegeExt::_internal_resource_type() const {
  return static_cast< ::milvus::proto::common::ResourceType >(resource_type_);
}
inline ::milvus::proto::common::ResourceType PrivilegeExt::resource_type() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.resource_type)
  return _internal_resource_type();
}
inline void PrivilegeExt::_internal_set_resource_type(::milvus::proto::common::ResourceType value) {
  
  resource_type_ = value;
}
inline void PrivilegeExt::set_resource_type(::milvus::proto::common::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.resource_type)
}

// .milvus.proto.common.ResourcePrivilege resource_privilege = 2;
inline void PrivilegeExt::clear_resource_privilege() {
  resource_privilege_ = 0;
}
inline ::milvus::proto::common::ResourcePrivilege PrivilegeExt::_internal_resource_privilege() const {
  return static_cast< ::milvus::proto::common::ResourcePrivilege >(resource_privilege_);
}
inline ::milvus::proto::common::ResourcePrivilege PrivilegeExt::resource_privilege() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.resource_privilege)
  return _internal_resource_privilege();
}
inline void PrivilegeExt::_internal_set_resource_privilege(::milvus::proto::common::ResourcePrivilege value) {
  
  resource_privilege_ = value;
}
inline void PrivilegeExt::set_resource_privilege(::milvus::proto::common::ResourcePrivilege value) {
  _internal_set_resource_privilege(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.resource_privilege)
}

// int32 resource_name_index = 3;
inline void PrivilegeExt::clear_resource_name_index() {
  resource_name_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivilegeExt::_internal_resource_name_index() const {
  return resource_name_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrivilegeExt::resource_name_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.common.PrivilegeExt.resource_name_index)
  return _internal_resource_name_index();
}
inline void PrivilegeExt::_internal_set_resource_name_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resource_name_index_ = value;
}
inline void PrivilegeExt::set_resource_name_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resource_name_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.common.PrivilegeExt.resource_name_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace milvus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::milvus::proto::common::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::ErrorCode>() {
  return ::milvus::proto::common::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::IndexState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::IndexState>() {
  return ::milvus::proto::common::IndexState_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::SegmentState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::SegmentState>() {
  return ::milvus::proto::common::SegmentState_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::PlaceholderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::PlaceholderType>() {
  return ::milvus::proto::common::PlaceholderType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::MsgType>() {
  return ::milvus::proto::common::MsgType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::DslType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::DslType>() {
  return ::milvus::proto::common::DslType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::CompactionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::CompactionState>() {
  return ::milvus::proto::common::CompactionState_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::ConsistencyLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::ConsistencyLevel>() {
  return ::milvus::proto::common::ConsistencyLevel_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::ImportState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::ImportState>() {
  return ::milvus::proto::common::ImportState_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::ResourceType>() {
  return ::milvus::proto::common::ResourceType_descriptor();
}
template <> struct is_proto_enum< ::milvus::proto::common::ResourcePrivilege> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::milvus::proto::common::ResourcePrivilege>() {
  return ::milvus::proto::common::ResourcePrivilege_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
